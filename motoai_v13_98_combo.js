/*
* üöÄ MotoAI v13 Smart Engine + v9.8 UI (Apple Glass Readable Edition)
* ƒê∆∞·ª£c h·ª£p nh·∫•t b·ªüi chuy√™n gia: L·∫•y giao di·ªán v9.8 (UI/CSS/HTML) v√† Tr√≠ tu·ªá v13 (Rules, Corpus, Logic).
*/
(function(){
  if(window.MotoAI_COMBO_V13_98_LOADED) return;
  window.MotoAI_COMBO_V13_98_LOADED = true;

  console.log('‚úÖ MotoAI v13 Smart + v9.8 UI ‚Äî initializing...');

  // ===================================
  // I. CONFIG (from v13)
  // ===================================
  const CFG = {
    maxCorpusSentences: 600,
    minSentenceLength: 20,
    suggestionTags: [
      {q:'Xe s·ªë', label:'üèç Xe s·ªë'},
      {q:'Xe ga', label:'üõµ Xe ga'},
      {q:'Th·ªß t·ª•c', label:'üìÑ Th·ªß t·ª•c'},
      {q:'Xe 50cc', label:'üö≤ Xe 50cc'},
      {q:'Li√™n h·ªá 0857255868', label:'‚òéÔ∏è Li√™n h·ªá'}
    ],
    memoryKeyName: 'MotoAI_v13_98_user_name',
    corpusKey: 'MotoAI_v13_98_corpus',
    sessionKey: 'MotoAI_v13_98_session_msgs',
    sitemapPath: '/moto_sitemap.json'
  };

  // ===================================
  // II. HTML (from v9.8)
  // ===================================
  const html = `
  <div id="motoai-root">
    <div id="motoai-bubble" role="button" aria-label="M·ªü chat">ü§ñ</div>
    <div id="motoai-backdrop"></div>
    <div id="motoai-card" aria-hidden="true">
      <div id="motoai-handle"></div>
      <div id="motoai-header">
        <span>MotoAI Assistant</span>
        <button id="motoai-close" title="ƒê√≥ng">‚úï</button>
      </div>
      <div id="motoai-body" tabindex="0" role="log" aria-live="polite">
        </div>
      <div id="motoai-suggestions" role="toolbar" aria-label="G·ª£i √Ω nhanh">
        </div>
      <div id="motoai-input">
        <input id="motoai-input-el" placeholder="Nh·∫≠p c√¢u h·ªèi..." autocomplete="off" aria-label="Nh·∫≠p c√¢u h·ªèi" />
        <button id="motoai-send" aria-label="G·ª≠i">G·ª≠i</button>
      </div>
      <button id="motoai-clear" title="X√≥a h·ªôi tho·∫°i">üóë</button>
    </div>
  </div>`;
  document.body.insertAdjacentHTML('beforeend', html);

  // ===================================
  // III. CSS (from v9.8)
  // ===================================
  const style = document.createElement('style');
  style.textContent = `
  :root {
    --accent: #007aff;
    --bg-light: rgba(255,255,255,0.85);
    --bg-dark: rgba(30,30,32,0.88);
    --blur-bg: blur(14px) saturate(160%);
    --card-shadow: 0 -12px 40px rgba(0,0,0,.18);
  }

  #motoai-root { position: fixed; left: 16px; bottom: 100px; z-index: 99997; }

  #motoai-bubble {
    width: 58px; height: 58px; border-radius: 14px;
    display: flex; align-items: center; justify-content: center;
    font-size: 28px; background: var(--accent); color: #fff;
    cursor: pointer; box-shadow: 0 8px 22px rgba(0,0,0,0.25);
    transition: transform .25s; pointer-events: auto;
  }
  #motoai-bubble:hover { transform: scale(1.05); }

  #motoai-backdrop {
    position: fixed; inset: 0; background: rgba(0,0,0,0.25);
    opacity: 0; pointer-events: none; transition: opacity .3s; z-index: 99998;
  }
  #motoai-backdrop.show { opacity: 1; pointer-events: auto; }

  #motoai-card {
    position: fixed; left: 0; right: 0; bottom: 0;
    width: min(900px, calc(100% - 30px)); margin: auto;
    height: 70vh; max-height: 720px; border-radius: 22px 22px 0 0;
    background: var(--bg-light); backdrop-filter: var(--blur-bg);
    box-shadow: var(--card-shadow);
    transform: translateY(110%); opacity: 0;
    display: flex; flex-direction: column;
    overflow: hidden; z-index: 99999;
    transition: transform .45s cubic-bezier(.2,.9,.2,1), opacity .3s ease;
  }
  #motoai-card.open { transform: translateY(0); opacity: 1; }

  #motoai-handle {
    width: 60px; height: 6px; background: rgba(160,160,160,0.6);
    border-radius: 6px; margin: 10px auto;
  }

  #motoai-header {
    display: flex; align-items: center; justify-content: space-between;
    padding: 6px 14px; font-weight: 700; color: var(--accent);
    border-bottom: 1px solid rgba(0,0,0,.06);
  }

  #motoai-close {
    background: none; border: none; font-size: 22px;
    cursor: pointer; color: var(--accent); opacity: .85;
  }

  #motoai-body {
    flex: 1; overflow-y: auto; padding: 10px 14px;
    font-size: 15px; background: transparent;
  }

  .m-msg {
    margin: 8px 0; padding: 12px 14px;
    border-radius: 18px; max-width: 84%;
    line-height: 1.4; word-break: break-word;
    box-shadow: 0 3px 8px rgba(0,0,0,0.08);
  }
  .m-msg.user {
    background: linear-gradient(180deg, var(--accent), #00b6ff);
    color: #fff; margin-left: auto;
  }
  .m-msg.bot {
    background: rgba(255,255,255,0.8);
    backdrop-filter: blur(6px);
    color: #111;
  }
  .m-msg.bot.glow {
    box-shadow: 0 0 18px rgba(0,122,255,0.3);
    transition: box-shadow 0.8s ease;
  }


  #motoai-suggestions {
    display: flex; gap: 6px; justify-content: center; flex-wrap: wrap;
    padding: 6px 10px; border-top: 1px solid rgba(0,0,0,.05);
    background: rgba(255,255,255,0.5); backdrop-filter: blur(10px);
  }
  #motoai-suggestions button {
    border: none; background: rgba(0,122,255,.08);
    color: var(--accent);
    padding: 8px 12px; border-radius: 12px;
    cursor: pointer; font-weight: 500;
    transition: background .25s;
  }
  #motoai-suggestions button:hover {
    background: rgba(0,122,255,.15);
  }

  #motoai-input {
    display: flex; gap: 8px; padding: 10px;
    border-top: 1px solid rgba(0,0,0,.06);
    background: rgba(255,255,255,0.7);
    backdrop-filter: blur(10px);
  }
  #motoai-input input {
    flex: 1; padding: 10px; border-radius: 12px;
    border: 1px solid rgba(0,0,0,0.1); font-size: 16px;
    background: rgba(255,255,255,0.6);
  }
  #motoai-input button {
    background: var(--accent); color: #fff;
    border: none; border-radius: 10px; padding: 10px 14px;
    font-weight: 600; transition: opacity .25s;
  }
  #motoai-input button:hover { opacity: 0.9; }

  #motoai-clear {
    position: absolute; top: 10px; right: 40px;
    background: none; border: none; font-size: 18px;
    cursor: pointer; opacity: .8; color: #333; /* make it visible on light theme */
    z-index: 10000;
  }

  @keyframes chatShake {
    0%,100%{transform:translateX(0);}
    25%{transform:translateX(2px);}
    50%{transform:translateX(-2px);}
    75%{transform:translateX(1px);}
  }
  .shake{animation:chatShake .25s linear;}

  @media (prefers-color-scheme: dark) {
    #motoai-card { background: var(--bg-dark); color: #eee; }
    .m-msg.bot { background: rgba(40,40,50,0.8); color: #eee; }
    #motoai-input { background: rgba(25,25,30,0.9); }
    #motoai-suggestions { background: rgba(25,25,30,0.8); }
    #motoai-input input {
      background: rgba(40,40,50,0.8);
      color: #eee; border: 1px solid rgba(255,255,255,0.1);
    }
    #motoai-header { color: var(--accent); }
    #motoai-close { color: #eee; opacity: 1; }
    #motoai-clear { color: #eee; }
  }

  @media (max-width:520px){
    #motoai-root { bottom: 18px; }
    #motoai-card{width:calc(100% - 24px);height:78vh;}
  }
  `;
  document.head.appendChild(style);


  // ===================================
  // IV. CORE JS LOGIC & UTILS (mostly from v13)
  // ===================================
  const $ = s => document.querySelector(s);
  const root = $('#motoai-root');
  const bubble = $('#motoai-bubble');
  const card = $('#motoai-card');
  const backdrop = $('#motoai-backdrop');
  const closeBtn = $('#motoai-close');
  const sendBtn = $('#motoai-send');
  const inputEl = $('#motoai-input-el'); // Changed from #motoai-input to #motoai-input-el
  const clearBtn = $('#motoai-clear');
  const bodyEl = $('#motoai-body');
  const suggestionsWrap = $('#motoai-suggestions');
  let isOpen = false, sendLock = false;
  let corpus = [];
  let sessionMsgs = [];

  // Placeholder for typing dots logic (v9.8 UI doesn't have a dedicated typing element)
  // We'll simulate it by adding/removing an element
  const TYPING_ID = 'motoai-typing-dots';
  function showTypingDots(){
    let dots = document.getElementById(TYPING_ID);
    if (!dots) {
      dots = document.createElement('div');
      dots.id = TYPING_ID;
      dots.className = 'm-msg bot';
      dots.innerHTML = '<span>.</span><span>.</span><span>.</span>';
      dots.style.textAlign = 'center';
      bodyEl.appendChild(dots);
      bodyEl.scrollTop = bodyEl.scrollHeight;
    }
  }
  function hideTypingDots(){
    const dots = document.getElementById(TYPING_ID);
    if(dots) dots.remove();
  }

  // --- V13 Utilities ---
  function tokenize(s){ return s.toLowerCase().replace(/[^\p{L}\p{N}\s]+/gu,' ').split(/\s+/).filter(Boolean); }
  function uniq(arr){ return Array.from(new Set(arr)); }
  function normalizeText(text) {
    if (!text) return '';
    return text.toLowerCase()
               .normalize("NFD")
               .replace(/[\u0300-\u036f]/g, "")
               .replace(/ƒë/g, "d");
  }

  // --- V13 Corpus Build ---
  function buildCorpusFromDOM(){
    // ... (Keep the full logic from v13 PART 2) ...
    try{
      let nodes = Array.from(document.querySelectorAll('main, article, section'));
      if(!nodes.length) nodes = [document.body];
      let texts = [];
      nodes.forEach(n=>{
        Array.from(n.querySelectorAll('h1,h2,h3')).forEach(h=>{ if(h.innerText && h.innerText.trim().length>10) texts.push(h.innerText.trim()); });
        Array.from(n.querySelectorAll('p, li')).forEach(p=>{ const t = p.innerText.trim(); if(t.length>=CFG.minSentenceLength) texts.push(t); });
      });
      if(!texts.length){
        const meta = document.querySelector('meta[name="description"]');
        if(meta && meta.content) texts.push(meta.content);
        const bodyTxt = document.body.innerText || '';
        bodyTxt.split(/[.!?]\s+/).forEach(s=>{ if(s.trim().length>CFG.minSentenceLength) texts.push(s.trim()); });
      }
      const uniqTexts = uniq(texts).slice(0, CFG.maxCorpusSentences);
      const currentCorpusTexts = new Set(corpus.map(c => c.text));
      uniqTexts.forEach(t => {
          if (!currentCorpusTexts.has(t)) {
              corpus.push({id: corpus.length, text: t, tokens: tokenize(t)});
          }
      });
      if (corpus.length < uniqTexts.length) {
        corpus = uniqTexts.map((t,i)=>({id:i, text:t, tokens:tokenize(t)}));
      }
      try{ localStorage.setItem(CFG.corpusKey, JSON.stringify(corpus)); }catch(e){}
      console.log(`üìö MotoAI v13+v9.8 built corpus: ${corpus.length} items`);
    }catch(e){ corpus=[]; }
  }
  // Restore corpus from localStorage if present
  (function restoreCorpus(){
    try{
      const raw = localStorage.getItem(CFG.corpusKey);
      if(raw){
        const parsed = JSON.parse(raw);
        if(Array.isArray(parsed) && parsed.length) { corpus = parsed; }
      }
    }catch(e){}
  })();

  // --- V13 Retrieval ---
  function retrieveBestAnswer(query){
    // ... (Keep the full logic from v13 PART 2) ...
    if(!query) return null;
    const qTokens = tokenize(query).filter(t=>t.length>1);
    if(!qTokens.length || !corpus.length) return null;
    let best = {score:0, text:null, id:null};
    for(const c of corpus){
      let score=0;
      for(const qt of qTokens){
        if(c.tokens.includes(qt)) score += 1;
      }
      if(c.text.toLowerCase().includes(query.toLowerCase())) score += 0.6;
      if(score>best.score){ best={score, text:c.text, id:c.id}; }
    }
    return best.score>0 ? best.text : null;
  }

  // --- V13 Session Persistence ---
  function loadSession(){
    try{
      const raw = sessionStorage.getItem(CFG.sessionKey);
      if(raw) sessionMsgs = JSON.parse(raw);
    }catch(e){ sessionMsgs = []; }
    if(!sessionMsgs || !Array.isArray(sessionMsgs)) sessionMsgs = [];
  }
  function saveSession(){ try{ sessionStorage.setItem(CFG.sessionKey, JSON.stringify(sessionMsgs)); }catch(e){} }

  // --- V13 Memory: User Name ---
  function saveUserName(name){ try{ localStorage.setItem(CFG.memoryKeyName, name); }catch(e){} }
  function getUserName(){ try{ return localStorage.getItem(CFG.memoryKeyName); }catch(e){return null;} }
  function detectNameFromText(txt){
    if(!txt) return null;
    const s = txt.replace(/\s+/g,' ').trim();
    const patterns = [
      /(?:t√¥i t√™n l√†|t√™n t√¥i l√†|m√¨nh t√™n l√†)\s+([A-Za-z\u00C0-\u024F0-9_\- ]{2,40})/i,
      /(?:t√¥i l√†|m√¨nh l√†)\s+([A-Za-z\u00C0-\u024F0-9_\- ]{2,40})/i
    ];
    for(const p of patterns){
      const m = s.match(p);
      if(m && m[1]){ const nm=m[1].trim(); saveUserName(nm); return nm; }
    }
    return null;
  }

  // --- V9.8 UI Render / V13 Message Logic ---
  function addMessage(role, text){
    const el = document.createElement('div');
    el.className = 'm-msg '+(role==='user'?'user':'bot');
    el.textContent = text;
    bodyEl.appendChild(el);

    if(role === 'bot') {
        el.classList.add('glow');
        setTimeout(()=> el.classList.remove('glow'), 1200);
    }

    bodyEl.scrollTop = bodyEl.scrollHeight;
    sessionMsgs.push({role, text, t:Date.now()});
    saveSession();
    return el;
  }

  function renderSession(){
    bodyEl.innerHTML = '';
    if(sessionMsgs && sessionMsgs.length){
      sessionMsgs.forEach(m=>{
        const el = document.createElement('div');
        el.className = 'm-msg '+(m.role==='user'?'user':'bot');
        el.textContent = m.text;
        bodyEl.appendChild(el);
      });
      bodyEl.scrollTop = bodyEl.scrollHeight;
    } else {
      const name = getUserName();
      addMessage('bot', `üëã Xin ch√†o${name ? ' ' + name : ''}! M√¨nh l√† MotoAI ‚Äî h·ªèi th·ª≠ ‚ÄúXe ga‚Äù, ‚ÄúXe s·ªë‚Äù hay ‚ÄúXe 50cc‚Äù nh√©!`);
    }
  }

  // --- V9.8 UI / V13 Open/Close Logic ---
  function openChat() {
    if(isOpen) return;
    card.classList.add('open');
    backdrop.classList.add('show');
    bubble.style.display = 'none';
    isOpen = true;
    renderSession();
    setTimeout(()=> { try{ inputEl.focus(); }catch(e){} }, 320);
    // document.documentElement.style.overflow = 'hidden'; // v9.8 didn't have this, let's keep it simple
    adaptCardHeight();
  }
  function closeChat() {
    if(!isOpen) return;
    card.classList.remove('open');
    backdrop.classList.remove('show');
    bubble.style.display = 'flex';
    isOpen = false;
    // document.documentElement.style.overflow = ''; // v9.8 didn't have this
    hideTypingDots();
  }
  function clearChat() {
    sessionMsgs = [];
    saveSession();
    bodyEl.innerHTML = '';
    addMessage('bot', 'üóë ƒê√£ x√≥a h·ªôi tho·∫°i.');
  }

  // --- V13 Suggestions Build ---
  function buildSuggestions(){
    suggestionsWrap.innerHTML = '';
    CFG.suggestionTags.forEach(s=>{
      const b = document.createElement('button');
      b.type='button'; b.textContent = s.label; b.dataset.q = s.q;
      b.addEventListener('click', (ev)=>{
        if(!isOpen) openChat();
        setTimeout(()=> window.MotoAI_sendQuery(s.q), 100);
      });
      suggestionsWrap.appendChild(b);
    });
  }

  // --- V13 UI Fixes ---
  function adaptCardHeight(){
    try{
      const vw = Math.max(document.documentElement.clientWidth, window.innerWidth||0);
      const vh = Math.max(document.documentElement.clientHeight, window.innerHeight||0);
      let h = Math.round(vh * (vw >= 900 ? 0.6 : vw >= 700 ? 0.68 : 0.78));
      h = Math.max(320, Math.min(760, h));
      card.style.height = h + 'px';
    }catch(e){}
  }

  function attachViewportHandler(){
    if(window.visualViewport){
      let last = 0;
      visualViewport.addEventListener('resize', ()=>{
        try{
          const offset = Math.max(0, window.innerHeight - visualViewport.height);
          if(Math.abs(offset-last) < 6) return;
          last = offset;
          if(offset > 120){
            card.style.bottom = (offset - (navigator.userAgent.includes('iPhone')?4:0)) + 'px';
          } else {
            card.style.bottom = '';
          }
        }catch(e){}
      });
    } else {
      window.addEventListener('resize', ()=>{ card.style.bottom = ''; });
    }
  }

  // ===================================
  // V. SMART ENGINE (from v13 PART 3)
  // ===================================
  const rules = [
    // (Keep the full 'rules' array from v13 PART 3 here)
    { pattern: /^(ch√†o|hi|hello|alo|xin ch√†o|h·ªó tr·ª£|gi√∫p|c·ª©u|h·ªèi)$/i,
      answer: [
        "Ch√†o b·∫°n! M√¨nh l√† MotoAI ü§ñ. M√¨nh c√≥ th·ªÉ gi√∫p g√¨ v·ªÅ thu√™ xe m√°y nh·ªâ?",
        "Xin ch√†o! B·∫°n mu·ªën h·ªèi v·ªÅ xe s·ªë, xe ga, th·ªß t·ª•c hay b·∫£ng gi√° thu√™ xe?",
        "MotoAI nghe! B·∫°n c·∫ßn h·ªó tr·ª£ th√¥ng tin g√¨ ·∫°?"
      ]
    },
    { pattern: /(xe s·ªë|xe wave|xe sirius|xe blade|vision|wave rsx|future|ex150|exciter 150|winner x|winner 150)/i,
      keywords: ['xe s·ªë', 'wave', 'sirius', 'blade', 'future', 'exciter', 'winner', 'ex150'],
      answer: [
        "B·∫°n tham kh·∫£o xe s·ªë nh√©! üèçÔ∏è Xe s·ªë th∆∞·ªùng ti·∫øt ki·ªám xƒÉng, gi√° thu√™ r·∫ª, ph√π h·ª£p ƒëi l·∫°i h√†ng ng√†y ho·∫∑c ƒëi ph∆∞·ª£t nh·∫π nh√†ng. B·∫°n mu·ªën xem b·∫£ng gi√° xe s·ªë kh√¥ng?",
        "Xe s·ªë (nh∆∞ Wave, Sirius) c√≥ gi√° thu√™ r·∫•t t·ªët, ch·ªâ t·ª´ 100k/ng√†y. Xe ch·∫°y b·ªÅn b·ªâ v√† d·ªÖ ƒëi·ªÅu khi·ªÉn. B·∫°n mu·ªën bi·∫øt th·ªß t·ª•c thu√™ xe s·ªë?"
      ]
    },
    { pattern: /(xe ga|xe tay ga|vision|lead|air blade|sh|grande|nvx|liberty|vespa)/i,
      keywords: ['xe ga', 'tay ga', 'vision', 'lead', 'air blade', 'sh', 'grande', 'nvx', 'liberty', 'vespa'],
      answer: [
        "Xe ga üõµ ch·∫°y √™m, c·ªëp r·ªông, ki·ªÉu d√°ng ƒë·∫πp, r·∫•t h·ª£p ƒëi trong th√†nh ph·ªë. Gi√° thu√™ xe ga nh∆∞ Vision, Lead th∆∞·ªùng t·ª´ 120k-150k/ng√†y. B·∫°n mu·ªën xem xe c·ª• th·ªÉ n√†o?",
        "D√≤ng xe ga r·∫•t ƒë∆∞·ª£c ∆∞a chu·ªông! Xe Vision v√† Lead l√† 2 l·ª±a ch·ªçn ph·ªï bi·∫øn nh·∫•t. B·∫°n c√≥ mu·ªën m√¨nh t∆∞ v·∫•n th√™m v·ªÅ ∆∞u ƒëi·ªÉm c·ªßa xe ga kh√¥ng?"
      ]
    },
    { pattern: /(50cc|xe 50|kh√¥ng c·∫ßn b·∫±ng|ch∆∞a c√≥ b·∫±ng|h·ªçc sinh|sinh vi√™n|b·∫±ng l√°i|gi·∫•y ph√©p l√°i xe|gplx)/i,
      keywords: ['50cc', 'kh√¥ng c·∫ßn b·∫±ng', 'ch∆∞a c√≥ b·∫±ng', 'h·ªçc sinh', 'sinh vi√™n', 'b·∫±ng l√°i', 'gplx'],
      exclude: ['c·∫ßn g√¨', 'th·ªß t·ª•c', 'gi·∫•y t·ªù'],
      answer: [
        "N·∫øu b·∫°n ch∆∞a c√≥ b·∫±ng l√°i, xe 50cc l√† l·ª±a ch·ªçn tuy·ªát v·ªùi! üö≤ Xe 50cc kh√¥ng y√™u c·∫ßu GPLX, ch·ªâ c·∫ßn CCCD. Xe nh·ªè g·ªçn, ti·∫øt ki·ªám xƒÉng, gi√° thu√™ c≈©ng r·∫•t r·∫ª. B·∫°n mu·ªën xem gi√° xe 50cc?",
        "B√™n m√¨nh c√≥ d√≤ng xe 50cc (nh∆∞ Giorno, Cub 50) kh√¥ng c·∫ßn b·∫±ng l√°i, r·∫•t h·ª£p cho c√°c b·∫°n h·ªçc sinh, sinh vi√™n. Th·ªß t·ª•c ch·ªâ c·∫ßn CCCD th√¥i ·∫°."
      ]
    },
    { pattern: /(th·ªß t·ª•c|gi·∫•y t·ªù|c·∫ßn g√¨|thu√™ xe c·∫ßn|ƒëi·ªÅu ki·ªán|c·ªçc|ƒë·∫∑t c·ªçc)/i,
      keywords: ['th·ªß t·ª•c', 'gi·∫•y t·ªù', 'c·∫ßn g√¨', 'ƒëi·ªÅu ki·ªán', 'c·ªçc', 'ƒë·∫∑t c·ªçc'],
      answer: [
        "Th·ªß t·ª•c thu√™ xe r·∫•t ƒë∆°n gi·∫£n! üìÑ B·∫°n ch·ªâ c·∫ßn chu·∫©n b·ªã 1 trong 2 lo·∫°i gi·∫•y t·ªù sau:\n1. CƒÉn c∆∞·ªõc c√¥ng d√¢n (CCCD) + Gi·∫•y ph√©p l√°i xe (GPLX).\n2. Ho·∫∑c Passport (H·ªô chi·∫øu) (N·∫øu l√† kh√°ch n∆∞·ªõc ngo√†i).\nB·∫°n kh√¥ng c·∫ßn ƒë·∫∑t c·ªçc ti·ªÅn m·∫∑t, ch·ªâ c·∫ßn ƒë·ªÉ l·∫°i gi·∫•y t·ªù g·ªëc khi nh·∫≠n xe ·∫°.",
        "V·ªÅ th·ªß t·ª•c, b·∫°n c·∫ßn CCCD v√† B·∫±ng l√°i xe (GPLX) nh√©. N·∫øu l√† xe 50cc th√¨ ch·ªâ c·∫ßn CCCD. B√™n m√¨nh gi·ªØ gi·∫•y t·ªù g·ªëc v√† s·∫Ω ho√†n tr·∫£ ngay khi b·∫°n tr·∫£ xe."
      ]
    },
    { pattern: /(gi√°|b·∫£ng gi√°|bao nhi√™u ti·ªÅn|nhiu ti·ªÅn|gi√° c·∫£|gi√° thu√™|thu√™ bao nhi√™u)/i,
      keywords: ['gi√°', 'bao nhi√™u ti·ªÅn', 'gi√° c·∫£', 'gi√° thu√™'],
      answer: [
        "B·∫£ng gi√° thu√™ xe r·∫•t linh ho·∫°t üí∞:\n- Xe s·ªë (Wave, Sirius): 100k - 120k/ng√†y.\n- Xe ga (Vision, Lead): 120k - 150k/ng√†y.\n- Xe c√¥n (Exciter, Winner): 200k - 250k/ng√†y.\nThu√™ c√†ng nhi·ªÅu ng√†y gi√° c√†ng r·∫ª. B·∫°n mu·ªën h·ªèi gi√° xe c·ª• th·ªÉ n√†o?",
        "Gi√° thu√™ xe dao ƒë·ªông t·ª´ 100k (xe s·ªë) ƒë·∫øn 150k (xe ga). Thu√™ theo tu·∫ßn ho·∫∑c th√°ng s·∫Ω c√≥ gi√° ∆∞u ƒë√£i h∆°n n·ªØa. B·∫°n mu·ªën thu√™ xe n√†o ƒë·ªÉ m√¨nh b√°o gi√° chi ti·∫øt?"
      ]
    },
    { pattern: /(li√™n h·ªá|sƒët|s·ªë ƒëi·ªán tho·∫°i|zalo|hotline|ƒë·ªãa ch·ªâ|·ªü ƒë√¢u|ƒë·∫øn ƒë√¢u|c·ª≠a h√†ng)/i,
      keywords: ['li√™n h·ªá', 'sƒët', 's·ªë ƒëi·ªán tho·∫°i', 'zalo', 'hotline', 'ƒë·ªãa ch·ªâ', '·ªü ƒë√¢u', 'c·ª≠a h√†ng'],
      answer: [
        "B·∫°n li√™n h·ªá Hotline/Zalo ‚òéÔ∏è 085.725.5868 ƒë·ªÉ ƒë·∫∑t xe nhanh nh·∫•t nh√©!\nƒê·ªãa ch·ªâ c·ª≠a h√†ng: [Nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n ·ªü ƒë√¢y].\nB√™n m√¨nh c√≥ h·ªó tr·ª£ giao xe t·∫≠n n∆°i mi·ªÖn ph√≠ trong n·ªôi th√†nh H√† N·ªôi ·∫°.",
        "ƒê·ªÉ ƒë·∫∑t xe, b·∫°n g·ªçi ngay 085.725.5868 (c√≥ Zalo) ·∫°. C·ª≠a h√†ng ·ªü [Nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n]. B·∫°n mu·ªën giao xe ƒë·∫øn t·∫≠n n∆°i hay qua c·ª≠a h√†ng l·∫•y xe?"
      ]
    },
    { pattern: /(giao xe|ship xe|v·∫≠n chuy·ªÉn|nh·∫≠n xe|l·∫•y xe|s√¢n bay|b·∫øn xe|t·∫≠n n∆°i)/i,
      keywords: ['giao xe', 'ship xe', 'v·∫≠n chuy·ªÉn', 'nh·∫≠n xe', 'l·∫•y xe', 's√¢n bay', 'b·∫øn xe', 't·∫≠n n∆°i'],
      answer: [
        "C√≥ ·∫°! üöÄ B√™n m√¨nh MI·ªÑN PH√ç giao nh·∫≠n xe t·∫≠n n∆°i t·∫°i c√°c qu·∫≠n n·ªôi th√†nh H√† N·ªôi, b·∫øn xe (Gi√°p B√°t, M·ªπ ƒê√¨nh, N∆∞·ªõc Ng·∫ßm...) v√† khu v·ª±c Ph·ªë C·ªï.\nCh·ªâ c·∫ßn g·ªçi 085.725.5868 l√† c√≥ xe ngay!",
        "D·ªãch v·ª• giao xe t·∫≠n n∆°i (kh√°ch s·∫°n, nh√† ri√™ng, b·∫øn xe...) l√† mi·ªÖn ph√≠ 100% trong n·ªôi th√†nh. B·∫°n ch·ªâ c·∫ßn ch·ªët xe v√† g·ª≠i ƒë·ªãa ch·ªâ, b√™n m√¨nh s·∫Ω mang xe qua."
      ]
    },
    { pattern: /^(c·∫£m ∆°n|thanks|ok|oke|tuy·ªát v·ªùi|t·ªët qu√°|hay qu√°)$/i,
      answer: [
        "Kh√¥ng c√≥ g√¨ ·∫°! B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ th√™m c·ª© h·ªèi m√¨nh nh√©. üòä",
        "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n!",
        "C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m. Li√™n h·ªá 085.725.5868 ƒë·ªÉ ƒë·∫∑t xe nha!"
      ]
    },
    { pattern: /.+/i,
      answer: [
        "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi n√†y. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ: 'Gi√° thu√™ xe', 'Th·ªß t·ª•c c·∫ßn g√¨', 'Xe ga' ho·∫∑c 'ƒê·ªãa ch·ªâ' kh√¥ng?",
        "M√¨nh ch∆∞a ƒë∆∞·ª£c l·∫≠p tr√¨nh ƒë·ªÉ tr·∫£ l·ªùi c√¢u n√†y. B·∫°n th·ª≠ h·ªèi v·ªÅ 'Xe s·ªë', 'Xe 50cc' ho·∫∑c g·ªçi 085.725.5868 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp nh√©."
      ],
      isFallback: true
    }
  ];

  function smartAnswer(query) {
    const normalizedQuery = normalizeText(query);
    let bestMatch = null;
    let highestScore = 0;

    for (const rule of rules) {
      if (rule.isFallback) continue;

      let score = 0;
      let match = false;

      if (rule.pattern.test(query) || rule.pattern.test(normalizedQuery)) {
        match = true;
        score = 2.0;
      }

      if (rule.keywords && rule.keywords.length > 0) {
        const queryWords = normalizedQuery.split(/\s+/);
        for (const kw of rule.keywords) {
          const normalizedKw = normalizeText(kw);
          if (normalizedQuery.includes(normalizedKw)) {
            if (queryWords.length === 1 && queryWords[0] === normalizedKw) {
              score += 1.5;
            } else {
              score += 1.0;
            }
          }
        }
      }

      if (rule.exclude && rule.exclude.length > 0) {
          let excluded = false;
          for (const ex of rule.exclude) {
              if (normalizedQuery.includes(normalizeText(ex))) {
                  excluded = true;
                  break;
              }
          }
          if (excluded) {
              score = 0;
              continue;
          }
      }

      if (score > highestScore) {
        highestScore = score;
        bestMatch = rule;
      }
    }

    if (bestMatch && highestScore > 0.5) {
      // choose random answer
      return bestMatch.answer[Math.floor(Math.random() * bestMatch.answer.length)];
    }

    return null;
  }

  // --- V13 SpellFix ---
  const spellMap = {
    'thue xe may': 'thu√™ xe m√°y', 'xe so': 'xe s·ªë', 'xe ga': 'xe ga',
    'thu tuc': 'th·ªß t·ª•c', 'giay to': 'gi·∫•y t·ªù', 'bang gia': 'b·∫£ng gi√°',
    'lien he': 'li√™n h·ªá', 'thue xe ha noi': 'thu√™ xe H√† N·ªôi'
  };
  function autoFixSpelling(text){
    let fixed = text.toLowerCase();
    for(const [wrong, right] of Object.entries(spellMap)){
      const regex = new RegExp(`\\b${wrong}\\b`, 'gi');
      fixed = fixed.replace(regex, right);
    }
    return fixed;
  }

  // --- V13 Combo SendQuery (integrated) ---
  async function comboSendQuery(text){
    if(!text || !text.trim()) return;

    const fixed = autoFixSpelling(text); // Apply spellfix

    if(sendLock) return;
    sendLock = true; sendBtn.disabled = true;
    hideTypingDots();

    // add user msg
    addMessage('user', fixed);

    // name detection
    const name = detectNameFromText(fixed);
    if(name){
      addMessage('bot', `ƒê√£ nh·ªõ t√™n: ${name} ‚ú®`);
      sendLock=false; sendBtn.disabled=false;
      setTimeout(()=> inputEl.focus(), 120);
      return;
    }

    showTypingDots();

    setTimeout(()=>{
      try{
        // smart engine first
        let ans = null;
        try{ ans = smartAnswer(fixed); }catch(e){ ans = null; }
        // fallback to retrieval if needed
        if(!ans) ans = retrieveBestAnswer(fixed);
        hideTypingDots();
        if(ans){
          addMessage('bot', ans);
        } else {
          // Fallback to the general fallback rule from v13 ruleset
          const fallbackRule = rules.find(r => r.isFallback);
          const fallbackAns = fallbackRule ? fallbackRule.answer[Math.floor(Math.random() * fallbackRule.answer.length)] : 'Xin l·ªói, m√¨nh ch∆∞a t√¨m th·∫•y c√¢u tr·∫£ l·ªùi.';
          addMessage('bot', fallbackAns);
        }
      }catch(e){
        hideTypingDots();
        addMessage('bot','L·ªói khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi.');
        console.error(e);
      } finally {
        sendLock=false; sendBtn.disabled=false;
        setTimeout(()=> inputEl.focus(),120);
      }
    }, 250);
  }

  // ===================================
  // VI. EVENT BINDING & INIT
  // ===================================
  function bindEvents(){
    bubble.onclick = () => { buildCorpusFromDOM(); openChat(); };
    backdrop.onclick = closeChat;
    closeBtn.onclick = closeChat;
    clearBtn.onclick = clearChat;

    sendBtn.addEventListener('click', ()=>{
      const v = (inputEl.value||'').trim();
      if(v){
        inputEl.value='';
        // Apply shake effect (from v13)
        setTimeout(() => {
          const newMsgEls = bodyEl.querySelectorAll('.m-msg.user');
          const newLast = newMsgEls[newMsgEls.length-1];
          if(newLast){
            newLast.classList.add('shake');
            setTimeout(()=> newLast.classList.remove('shake'), 280);
          }
        }, 10);
        comboSendQuery(v);
      }
    });

    inputEl.addEventListener('keydown', (e)=>{
      if(e.key === 'Enter' && !e.shiftKey){
        e.preventDefault();
        const v = (inputEl.value||'').trim();
        if(v){
          inputEl.value='';
          // Apply shake effect (from v13)
          setTimeout(() => {
            const newMsgEls = bodyEl.querySelectorAll('.m-msg.user');
            const newLast = newMsgEls[newMsgEls.length-1];
            if(newLast){
              newLast.classList.add('shake');
              setTimeout(()=> newLast.classList.remove('shake'), 280);
            }
          }, 10);
          comboSendQuery(v);
        }
      }
    });

    // Suggestions buttons
    suggestionsWrap.addEventListener('click', (e) => {
      if (e.target.tagName === 'BUTTON' && e.target.dataset.q) {
        if(!isOpen) openChat();
        setTimeout(() => comboSendQuery(e.target.dataset.q), 100);
      }
    });

    // Escape to close
    document.addEventListener('keydown',(e)=>{
      if(e.key === 'Escape' && isOpen) closeChat();
    });

    // Small observers for theme sync / glow (simplified from v13)
    const chatObserver = new MutationObserver((mut)=>{
        mut.forEach(m=>{
          m.addedNodes.forEach(node=>{
            if(node.nodeType === 1 && node.classList.contains('m-msg') && node.classList.contains('bot')){
              node.classList.add('glow');
              setTimeout(()=> node.classList.remove('glow'), 1200);
            }
          });
        });
      });
      if(bodyEl) chatObserver.observe(bodyEl, {childList:true});
  }

  // --- V13 Async Learning Functions (kept for smartness) ---
  // (Note: learnFromMySites and learnFromRepo functions should be copied here if needed,
  // but for conciseness, I'll only keep their calls in init, assuming the functions exist.)

  /* --- V13 LearnFromRepo --- */
  async function learnFromRepo(){
    // (Copy full learnFromRepo from v13 PART 3 here)
    try{
      const lastLearn = localStorage.getItem('MotoAI_lastLearn');
      const threeDays = 3 * 24 * 60 * 60 * 1000;
      if (lastLearn && (Date.now() - lastLearn) < threeDays) {
        console.log('‚è≥ B·ªè qua learnFromRepo: Ch∆∞a ƒë·ªß 3 ng√†y.');
        return;
      }
      const sitemap = CFG.sitemapPath || '/moto_sitemap.json';
      const res = await fetch(sitemap, { cache: 'no-store' });
      if (!res.ok) {
        console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file sitemap:', sitemap);
        return;
      }
      const data = await res.json();
      if (!data.pages || !Array.isArray(data.pages)) {
        console.log('‚ö†Ô∏è ƒê·ªãnh d·∫°ng moto_sitemap.json kh√¥ng h·ª£p l·ªá');
        return;
      }
      console.log(`üìñ MotoAI is reading ${data.pages.length} pages...`);
      let totalNew = 0;
      let currentCorpusTexts = new Set(corpus.map(c => c.text));
      for (const path of data.pages) {
        try {
          const r = await fetch(path, { cache: 'no-store' });
          if (!r.ok) continue;
          const txt = await r.text();
          const lines = txt.split(/[\r\n]+/).map(l => l.trim()).filter(l => l.length > CFG.minSentenceLength);
          lines.forEach(t => {
            if (!currentCorpusTexts.has(t)) {
              corpus.push({ id: corpus.length, text: t, tokens: tokenize(t) });
              currentCorpusTexts.add(t);
              totalNew++;
            }
          });
        } catch (e) {
          // ignore
        }
      }
      console.log('‚úÖ H·ªçc xong to√†n repo:', corpus.length, 'm·∫´u, m·ªõi th√™m', totalNew);
      try {
        localStorage.setItem(CFG.corpusKey, JSON.stringify(corpus));
        localStorage.setItem('MotoAI_lastLearn', Date.now());
      } catch (e) { }
    } catch (e) {
      console.error('‚ùå L·ªói learnFromRepo:', e);
    }
  }

  /* --- V13 LearnFromMySites --- */
  async function learnFromMySites() {
    // (Copy full learnFromMySites from v13 PART 3 here)
    const relatedSites = [
      "https://motoopen.github.io/chothuexemayhanoi/",
      "https://motoopen.github.io/",
      // add more if you want
    ];

    try {
      console.log("üåê MotoAI: learning from configured sites...");
      let totalNew = 0;
      const currentCorpusTexts = new Set(corpus.map(c => c.text));
      for (const site of relatedSites) {
        try {
          const res = await fetch(site, { cache: "no-store", mode: "cors" });
          if (!res.ok) continue;
          const html = await res.text();
          const tmp = document.createElement("div");
          tmp.innerHTML = html;
          const texts = Array.from(tmp.querySelectorAll("p,h1,h2,h3,li,section,article"))
            .map(e => e.textContent.trim())
            .filter(t => t.length > 40 && !t.includes("{") && !t.includes("}"));
          texts.forEach(t => {
            if (!currentCorpusTexts.has(t)) {
              corpus.push({ id: corpus.length, text: t, tokens: tokenize(t), source: site });
              currentCorpusTexts.add(t);
              totalNew++;
            }
          });
          console.log(`‚úÖ H·ªçc t·ª´ ${site}: +${texts.length} ƒëo·∫°n.`);
        } catch (e) {
          // ignore CORS or fetch errors
        }
      }
      if (totalNew > 0) localStorage.setItem(CFG.corpusKey, JSON.stringify(corpus));
    } catch (e) {
      console.error("‚ùå L·ªói learnFromMySites:", e);
    }
  }


  function init(){
    buildSuggestions();
    loadSession();
    buildCorpusFromDOM(); // Initial build
    attachViewportHandler();

    bindEvents(); // Bind all UI events

    // Final bootstrap
    window.MotoAI = Object.assign(window.MotoAI || {}, {
      open: openChat,
      close: closeChat,
      rebuildCorpus: buildCorpusFromDOM,
      getName: getUserName,
      clearMemory: ()=>{ try{ localStorage.removeItem(CFG.memoryKeyName); }catch(e){} },
      sendQuery: comboSendQuery, // Expose the smart combo function
      tokenize: tokenize,
      isSmart: true,
      uiVersion: '9.8',
      smartVersion: '13'
    });

    console.log('%cüöÄ MotoAI v13 Smart Engine + v9.8 UI Finalized!', 'color:#007aff;font-weight:bold;');
  }

  // Auto refresh corpus every 72h
  (function(){
    const now = Date.now();
    const last = parseInt(localStorage.getItem('MotoAI_lastCorpusBuild')||'0',10);
    const seventyTwoHrs = 72*60*60*1000;
    if(!last || (now-last)>seventyTwoHrs){
      try{ buildCorpusFromDOM(); }catch(e){}
      localStorage.setItem('MotoAI_lastCorpusBuild',now);
    }
  })();

  // Run init after DOM is loaded
  setTimeout(init, 160);

  // Start learning async after load
  window.addEventListener('load', ()=>{
    setTimeout(async ()=>{
      await learnFromMySites();
      await learnFromRepo();
    }, 1200);
  });

})();
