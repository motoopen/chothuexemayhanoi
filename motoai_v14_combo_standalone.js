/* motoai_v13_combo_standalone.js
   MotoAI v13 Combo Standalone ‚Äî Full UI (v10) + Smart Engine (v13)
   
   *** GEMINI FIX ***
   L·ªñI B√ÄN PH√çM T·ª∞ NH·∫¢Y L√äN TR√äN MOBILE:
   ƒê√£ ƒë∆∞·ª£c s·ª≠a b·∫±ng c√°ch comment out (v√¥ hi·ªáu h√≥a) d√≤ng `inputEl.focus()` 
   b√™n trong h√†m `openChat()`. File n√†y ƒë√£ bao g·ªìm b·∫£n s·ª≠a l·ªói ƒë√≥.
   
   NOTE: Paste Part 1, then Part 2, then Part 3 into a single file.
   FIX: Removed input auto-focus to prevent iOS keyboard pop-up on bubble tap.
   OPTIMIZED: Added CSS for smoother mobile scrolling and touch handling.
*/

/* ===========================
   PART 1/3 ‚Äî UI + CORE (from v10)
   =========================== */
(function(){
  if(window.MotoAI_v13_COMBO_LOADED) {
    console.log('MotoAI v13 Combo already loaded.');
    return;
  }
  window.MotoAI_v13_COMBO_LOADED = true;

  console.log('‚úÖ MotoAI v13 Combo ‚Äî initializing UI core...');

  /* -------- CONFIG -------- */
  const CFG = {
    maxCorpusSentences: 600,
    minSentenceLength: 20,
    suggestionTags: [
      {q:'Xe s·ªë', label:'üèç Xe s·ªë'},
      {q:'Xe ga', label:'üõµ Xe ga'},
      {q:'Th·ªß t·ª•c', label:'üìÑ Th·ªß t·ª•c'},
      {q:'Xe 50cc', label:'üö≤ Xe 50cc'},
      {q:'Li√™n h·ªá 0857255868', label:'‚òéÔ∏è Li√™n h·ªá'}
    ],
    memoryKeyName: 'MotoAI_v13_combo_user_name',
    corpusKey: 'MotoAI_v13_combo_corpus',
    sessionKey: 'MotoAI_v13_combo_session_msgs',
    sitemapPath: '/moto_sitemap.json'
  };

  /* --------- HTML inject (UI) ---------- */
  const html = `
  <div id="motoai-root" aria-hidden="false">
    <div id="motoai-bubble" role="button" aria-label="M·ªü MotoAI">ü§ñ</div>
    <div id="motoai-overlay" aria-hidden="true">
      <div id="motoai-card" role="dialog" aria-modal="true" aria-hidden="true">
        <div id="motoai-handle" aria-hidden="true"></div>
        <header id="motoai-header">
          <div class="title">MotoAI Assistant</div>
          <div class="tools">
            <button id="motoai-clear" title="X√≥a cu·ªôc tr√≤ chuy·ªán">üóë</button>
            <button id="motoai-close" title="ƒê√≥ng">‚úï</button>
          </div>
        </header>
        <main id="motoai-body" tabindex="0" role="log" aria-live="polite"></main>
        <div id="motoai-suggestions" role="toolbar" aria-label="G·ª£i √Ω nhanh"></div>
        <footer id="motoai-footer">
          <div id="motoai-typing" aria-hidden="true"></div>
          <input id="motoai-input" placeholder="Nh·∫≠p c√¢u h·ªèi..." autocomplete="off" aria-label="Nh·∫≠p c√¢u h·ªèi"/>
          <button id="motoai-send" aria-label="G·ª≠i">G·ª≠i</button>
        </footer>
      </div>
    </div>
  </div>`;
  document.body.insertAdjacentHTML('beforeend', html);

  /* ---------- CSS (UI styles) ---------- */
  const css = `
    :root{
      --m10-accent:#0a84ff;
      --m10-card-bg:#f5f7fa;
      --m10-card-bg-dark:#0b0c0e;
      --m10-blur:blur(10px) saturate(130%);
      --m10-radius:18px;
      --glass-border:rgba(0,0,0,0.08);
      --footer-bg:rgba(255,255,255,0.7);
      --bg:#ffffff;
      --text:#000000;
      --muted:#9aa4b2;
    }

    #motoai-root{position:fixed;left:16px;bottom:18px;z-index:9999;pointer-events:none}
    #motoai-bubble{
      pointer-events:auto;width:56px;height:56px;border-radius:14px;
      display:flex;align-items:center;justify-content:center;
      font-size:26px;background:var(--m10-accent);color:#fff;
      box-shadow:0 10px 28px rgba(2,6,23,0.5);cursor:pointer;
      transition:transform .16s;
    }
    #motoai-bubble:hover{transform:scale(1.06)}
    #motoai-overlay{
      position:fixed;inset:0;display:flex;align-items:flex-end;justify-content:center;
      padding:12px;pointer-events:none;transition:background .24s ease;
      z-index:9998;
      touch-action: pan-y; /* Optimization for mobile scroll */
    }
    #motoai-overlay.visible{background:rgba(0,0,0,0.4);pointer-events:auto}
    #motoai-card{
      width:min(920px,calc(100% - 36px));max-width:920px;
      border-radius:var(--m10-radius) var(--m10-radius) 10px 10px;
      height:72vh;max-height:760px;min-height:320px;
      background:var(--m10-card-bg);
      backdrop-filter:var(--m10-blur);
      box-shadow:0 -18px 60px rgba(0,0,0,0.25);
      display:flex;flex-direction:column;overflow:hidden;
      transform:translateY(110%);opacity:0;pointer-events:auto;
      transition:transform .36s cubic-bezier(.2,.9,.2,1),opacity .28s;
      color:var(--text);
      -webkit-overflow-scrolling: touch; /* iOS smooth scrolling */
      overscroll-behavior: contain; /* Prevents background scroll */
    }
    #motoai-overlay.visible #motoai-card{transform:translateY(0);opacity:1}
    #motoai-handle{width:64px;height:6px;background:rgba(160,160,160,0.6);border-radius:6px;margin:10px auto}
    #motoai-body{
      flex:1;overflow:auto;padding:12px 16px;font-size:15px;background:transparent;
      -webkit-overflow-scrolling: touch; /* iOS smooth scrolling */
      overscroll-behavior: contain;
    }

    #motoai-header{
      display:flex;align-items:center;justify-content:space-between;
      padding:8px 14px;font-weight:700;color:var(--m10-accent);
      border-bottom:1px solid rgba(0,0,0,0.06);
    }
    #motoai-header .tools button{background:none;border:none;font-size:18px;cursor:pointer;padding:6px 8px; color:var(--text);}

    .m-msg{margin:8px 0;padding:12px 14px;border-radius:16px;max-width:86%;line-height:1.4;word-break:break-word;box-shadow:0 6px 18px rgba(2,6,23,0.1);}
    .m-msg.bot{background:rgba(255,255,255,0.9);color:#111;}
    .m-msg.user{background:linear-gradient(180deg,var(--m10-accent),#0066d9);color:#fff;margin-left:auto;box-shadow:0 8px 26px rgba(10,132,255,0.2);}

    #motoai-suggestions{
      display:flex;gap:8px;justify-content:center;
      padding:8px 12px;border-top:1px solid rgba(0,0,0,0.04);
      flex-wrap:wrap;background:rgba(255,255,255,0.6);
      backdrop-filter:blur(8px);
    }
    #motoai-suggestions button{
      border:none;background:rgba(0,122,255,0.1);
      color:var(--m10-accent);padding:8px 12px;border-radius:12px;
      cursor:pointer;font-weight:600;
    }

    #motoai-footer{
      display:flex;align-items:center;justify-content:center;
      gap:8px;padding:10px;border-top:1px solid var(--glass-border);
      background:var(--footer-bg);backdrop-filter:blur(8px);
    }
    #motoai-input{
      flex:1;padding:10px 12px;border-radius:12px;
      border:1px solid var(--glass-border);
      font-size:15px;background:var(--bg);color:var(--text);
    }
    #motoai-send{
      background:var(--m10-accent);color:#fff;border:none;
      border-radius:12px;padding:10px 16px;cursor:pointer;
      flex-shrink:0;transition:all .25s;
    }
    #motoai-send:hover{transform:scale(1.08);}
    .m-msg.bot.glow{
      box-shadow:0 0 18px rgba(0,122,255,0.3);
      transition:box-shadow 0.8s ease;
    }

    @keyframes chatShake {
      0%,100%{transform:translateX(0);}
      25%{transform:translateX(2px);}
      50%{transform:translateX(-2px);}
      75%{transform:translateX(1px);}
    }
    .shake{animation:chatShake .25s linear;}

    body.dark #motoai-card{
      background:linear-gradient(180deg,#0b0c0e,#060607);
      color:#f2f2f7;
      box-shadow:0 12px 36px rgba(0,0,0,0.4);
    }
    body.dark #motoai-header .tools button{color:#f2f2f7;}

    @media (prefers-color-scheme:dark){
      :root{
        --m10-card-bg:var(--m10-card-bg-dark);
        --glass-border:rgba(255,255,255,0.08);
        --footer-bg:rgba(25,25,30,0.9);
        --bg:#0f1113;
        --text:#f2f2f7;
      }
      .m-msg.bot{background:rgba(35,37,39,0.9);color:#f2f2f7;}
      .m-msg.user{background:linear-gradient(180deg,#0a84ff,#0071e3);}
      #motoai-suggestions{background:rgba(25,25,30,0.9);}
      #motoai-header .tools button{color:#f2f2f7;}
    }
    @media (max-width:520px){
      #motoai-card{width:calc(100% - 24px);height:78vh;}
    }
  `;
  const sN = document.createElement('style'); sN.textContent = css; document.head.appendChild(sN);

  /* ---------- Helpers & state ---------- */
  const $ = sel => document.querySelector(sel);
  const root = $('#motoai-root'), bubble = $('#motoai-bubble'), overlay = $('#motoai-overlay');
  const card = $('#motoai-card'), bodyEl = $('#motoai-body'), inputEl = $('#motoai-input'), sendBtn = $('#motoai-send');
  const closeBtn = $('#motoai-close'), clearBtn = $('#motoai-clear'), typingEl = $('#motoai-typing');
  const suggestionsWrap = $('#motoai-suggestions');

  let isOpen = false, sendLock = false;
  let corpus = [];
  let sessionMsgs = [];

  function tokenize(s){ return s.toLowerCase().replace(/[^\p{L}\p{N}\s]+/gu,' ').split(/\s+/).filter(Boolean); }
  function uniq(arr){ return Array.from(new Set(arr)); }

  /* ---------- End of PART 1 (UI core) ----------
     Continue to PART 2 for core logic, retrieval, persistence, and smart engine.
*/

 
/* ===========================
   PART 2/3 ‚Äî Core logic, corpus, retrieval, session, init
   =========================== */

  /* -------- Corpus build: prefer <main>, <article>, <section>, headings, lists -------- */
  function buildCorpusFromDOM(){
    try{
      let nodes = Array.from(document.querySelectorAll('main, article, section'));
      if(!nodes.length) nodes = [document.body];
      let texts = [];
      nodes.forEach(n=>{
        Array.from(n.querySelectorAll('h1,h2,h3')).forEach(h=>{ if(h.innerText && h.innerText.trim().length>10) texts.push(h.innerText.trim()); });
        Array.from(n.querySelectorAll('p, li')).forEach(p=>{ const t = p.innerText.trim(); if(t.length>=CFG.minSentenceLength) texts.push(t); });
      });
      if(!texts.length){
        const meta = document.querySelector('meta[name="description"]');
        if(meta && meta.content) texts.push(meta.content);
        const bodyTxt = document.body.innerText || '';
        bodyTxt.split(/[.!?]\s+/).forEach(s=>{ if(s.trim().length>CFG.minSentenceLength) texts.push(s.trim()); });
      }
      const uniqTexts = uniq(texts).slice(0, CFG.maxCorpusSentences);
      const currentCorpusTexts = new Set(corpus.map(c => c.text));
      uniqTexts.forEach(t => {
          if (!currentCorpusTexts.has(t)) {
              corpus.push({id: corpus.length, text: t, tokens: tokenize(t)});
          }
      });
      if (corpus.length < uniqTexts.length) {
        corpus = uniqTexts.map((t,i)=>({id:i, text:t, tokens:tokenize(t)}));
      }
      try{ localStorage.setItem(CFG.corpusKey, JSON.stringify(corpus)); }catch(e){}
      console.log(`üìö MotoAI v13 Combo built corpus: ${corpus.length} items`);
    }catch(e){ corpus=[]; }
  }

  // Restore corpus from localStorage if present
  (function restoreCorpus(){
    try{
      const raw = localStorage.getItem(CFG.corpusKey);
      if(raw){
        const parsed = JSON.parse(raw);
        if(Array.isArray(parsed) && parsed.length) { corpus = parsed; }
      }
    }catch(e){}
  })();

  /* -------- Retrieval: TF-style overlap score (fast) -------- */
  function retrieveBestAnswer(query){
    if(!query) return null;
    const qTokens = tokenize(query).filter(t=>t.length>1);
    if(!qTokens.length || !corpus.length) return null;
    let best = {score:0, text:null, id:null};
    for(const c of corpus){
      let score=0;
      for(const qt of qTokens){
        if(c.tokens.includes(qt)) score += 1;
      }
      if(c.text.toLowerCase().includes(query.toLowerCase())) score += 0.6;
      if(score>best.score){ best={score, text:c.text, id:c.id}; }
    }
    return best.score>0 ? best.text : null;
  }

  /* -------- Session persistence -------- */
  function loadSession(){
    try{
      const raw = sessionStorage.getItem(CFG.sessionKey);
      if(raw) sessionMsgs = JSON.parse(raw);
    }catch(e){ sessionMsgs = []; }
    if(!sessionMsgs || !Array.isArray(sessionMsgs)) sessionMsgs = [];
  }
  function saveSession(){ try{ sessionStorage.setItem(CFG.sessionKey, JSON.stringify(sessionMsgs)); }catch(e){} }

  /* -------- Memory: user name -------- */
  function saveUserName(name){ try{ localStorage.setItem(CFG.memoryKeyName, name); }catch(e){} }
  function getUserName(){ try{ return localStorage.getItem(CFG.memoryKeyName); }catch(e){return null;} }
  function detectNameFromText(txt){
    if(!txt) return null;
    const s = txt.replace(/\s+/g,' ').trim();
    const patterns = [
      /(?:t√¥i t√™n l√†|t√™n t√¥i l√†|m√¨nh t√™n l√†)\s+([A-Za-z\u00C0-\u024F0-9_\- ]{2,40})/i,
      /(?:t√¥i l√†|m√¨nh l√†)\s+([A-Za-z\u00C0-\u024F0-9_\- ]{2,40})/i
    ];
    for(const p of patterns){
      const m = s.match(p);
      if(m && m[1]){ const nm=m[1].trim(); saveUserName(nm); return nm; }
    }
    return null;
  }

  /* -------- UI helpers -------- */
  function addMessage(role, text, opts){
    const el = document.createElement('div');
    el.className = 'm-msg '+(role==='user'?'user':'bot');
    el.textContent = text;
    bodyEl.appendChild(el);
    bodyEl.scrollTop = bodyEl.scrollHeight;
    sessionMsgs.push({role, text, t:Date.now()});
    saveSession();
    return el;
  }

  function showTypingDots(){
    typingEl.innerHTML = `<span class="dot">.</span><span class="dot">.</span><span class="dot">.</span>`;
    typingEl.style.opacity = '1';
  }
  function hideTypingDots(){ typingEl.innerHTML=''; typingEl.style.opacity='0'; }

  /* ---------- Build suggestion buttons ---------- */
  function buildSuggestions(){
    suggestionsWrap.innerHTML = '';
    CFG.suggestionTags.forEach(s=>{
      const b = document.createElement('button');
      b.type='button'; b.textContent = s.label; b.dataset.q = s.q;
      b.addEventListener('click', (ev)=>{
        if(!isOpen) openChat();
        setTimeout(()=> sendQuery(s.q), 100);
      });
      suggestionsWrap.appendChild(b);
    });
  }

  /* ---------- Open/close logic ---------- */
  function openChat(){
    if(isOpen) return;
    overlay.classList.add('visible');
    card.setAttribute('aria-hidden','false'); overlay.setAttribute('aria-hidden','false');
    isOpen = true;
    const name = getUserName();
    if(name) setTimeout(()=> addMessage('bot', `Ch√†o ${name}! M√¨nh nh·ªõ b·∫°n r·ªìi üëã`), 400);
    renderSession();
    
    // *** ƒê√ÇY L√Ä B·∫¢N S·ª¨A L·ªñI ***
    // D√≤ng code b√™n d∆∞·ªõi ƒë√£ b·ªã v√¥ hi·ªáu h√≥a (comment out) ƒë·ªÉ ngƒÉn b√†n ph√≠m t·ª± ƒë·ªông nh·∫£y l√™n tr√™n iOS/Android.
    // FIX for iOS keyboard: Removed input auto-focus to prevent keyboard from popping up on bubble tap.
    // setTimeout(()=> { try{ inputEl.focus(); }catch(e){} }, 320); 
    
    document.documentElement.style.overflow = 'hidden';
    adaptCardHeight();
  }
  function closeChat(){
    if(!isOpen) return;
    overlay.classList.remove('visible');
    card.setAttribute('aria-hidden','true'); overlay.setAttribute('aria-hidden','true');
    isOpen = false;
    document.documentElement.style.overflow = '';
    hideTypingDots();
  }

  /* ---------- Render saved session to UI ---------- */
  function renderSession(){
    bodyEl.innerHTML = '';
    if(sessionMsgs && sessionMsgs.length){
      sessionMsgs.forEach(m=>{
        const el = document.createElement('div');
        el.className = 'm-msg '+(m.role==='user'?'user':'bot');
        el.textContent = m.text;
        bodyEl.appendChild(el);
      });
      bodyEl.scrollTop = bodyEl.scrollHeight;
    } else {
      addMessage('bot','üëã Xin ch√†o! M√¨nh l√† MotoAI ‚Äî h·ªèi th·ª≠ ‚ÄúXe ga‚Äù, ‚ÄúXe s·ªë‚Äù, ‚ÄúXe 50cc‚Äù ho·∫∑c ‚ÄúTh·ªß t·ª•c‚Äù nh√©!');
    }
  }

  /* ---------- sendQuery placeholder (will be replaced by smart engine below) ---------- */
  async function sendQuery(text){
    if(!text || !text.trim()) return;
    if(sendLock) return;
    sendLock = true; sendBtn.disabled = true;
    hideTypingDots();

    addMessage('user', text);

    const name = detectNameFromText(text);
    if(name){
      addMessage('bot', `ƒê√£ nh·ªõ t√™n: ${name} ‚ú®`);
      sendLock=false; sendBtn.disabled=false;
      setTimeout(()=> inputEl.focus(), 120);
      return;
    }

    showTypingDots();

    setTimeout(()=>{
      try{
        let ans = retrieveBestAnswer(text);
        hideTypingDots();
        if(ans){
          addMessage('bot', ans);
        } else {
          addMessage('bot', 'Xin l·ªói, m√¨nh ch∆∞a t√¨m th·∫•y n·ªôi dung c·ª• th·ªÉ tr√™n trang n√†y ho·∫∑c b·ªô nh·ªõ h·ªçc. B·∫°n th·ª≠ h·ªèi kh√°c nha.');
        }
      }catch(e){
        hideTypingDots();
        addMessage('bot','L·ªói khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi.');
        console.error(e);
      } finally {
        sendLock=false; sendBtn.disabled=false;
        setTimeout(()=> inputEl.focus(),120);
      }
    }, 300);
  }

  /* ---------- Quick analytic: avoid overlap with quickcall/toc ---------- */
  function avoidOverlap(){
    try{
      const rootEl = root;
      const selectors = ['.quick-call-game','.quick-call','#toc','.toc','.table-of-contents'];
      let found = [];
      selectors.forEach(s=>{
        const el = document.querySelector(s); if(el) found.push(el);
      });
      if(!found.length){
        rootEl.style.left = '16px'; rootEl.style.bottom = '18px'; return;
      }
      let maxH = 0; let leftNear = false;
      found.forEach(el=>{
        const r = el.getBoundingClientRect();
        if(r.left < 150 && (window.innerHeight - r.bottom) < 240) leftNear = true;
        if(r.height>maxH) maxH = r.height;
      });
      if(leftNear){
        rootEl.style.left = Math.min(160, 16 + Math.round(Math.max(40, maxH*0.6))) + 'px';
        rootEl.style.bottom = (18 + Math.round(maxH*0.5)) + 'px';
      } else {
        rootEl.style.left = '16px'; rootEl.style.bottom = '18px';
      }
    }catch(e){}
  }

  /* ---------- iOS VisualViewport keyboard fix ---------- */
  function attachViewportHandler(){
    if(window.visualViewport){
      let last = 0;
      visualViewport.addEventListener('resize', ()=>{
        try{
          const offset = Math.max(0, window.innerHeight - visualViewport.height);
          if(Math.abs(offset-last) < 6) return;
          last = offset;
          if(offset > 120){
            // This logic correctly pushes the card up above the iOS keyboard
            card.style.bottom = (offset - (navigator.userAgent.includes('iPhone')?4:0)) + 'px';
          } else {
            card.style.bottom = '';
          }
        }catch(e){}
      });
    } else {
      window.addEventListener('resize', ()=>{ card.style.bottom = ''; });
    }
  }

  /* ===========================
   PART 3/3 ‚Äî Smart Engine (v13), SpellFix, Theme Sync, LearnFromRepo, final bootstrap
   =========================== */

/* ---------- Smart Engine Rules (from your v13 ruleset) ---------- */
const rules = [
  { pattern: /^(ch√†o|hi|hello|alo|xin ch√†o|h·ªó tr·ª£|gi√∫p|c·ª©u|h·ªèi)$/i,
    answer: [
      "Ch√†o b·∫°n! M√¨nh l√† MotoAI ü§ñ. M√¨nh c√≥ th·ªÉ gi√∫p g√¨ v·ªÅ thu√™ xe m√°y nh·ªâ?",
      "Xin ch√†o! B·∫°n mu·ªën h·ªèi v·ªÅ xe s·ªë, xe ga, th·ªß t·ª•c hay b·∫£ng gi√° thu√™ xe?",
      "MotoAI nghe! B·∫°n c·∫ßn h·ªó tr·ª£ th√¥ng tin g√¨ ·∫°?"
    ]
  },
  { pattern: /(xe s·ªë|xe wave|xe sirius|xe blade|vision|wave rsx|future|ex150|exciter 150|winner x|winner 150)/i,
    keywords: ['xe s·ªë', 'wave', 'sirius', 'blade', 'future', 'exciter', 'winner', 'ex150'],
    answer: [
      "B·∫°n tham kh·∫£o xe s·ªë nh√©! üèçÔ∏è Xe s·ªë th∆∞·ªùng ti·∫øt ki·ªám xƒÉng, gi√° thu√™ r·∫ª, ph√π h·ª£p ƒëi l·∫°i h√†ng ng√†y ho·∫∑c ƒëi ph∆∞·ª£t nh·∫π nh√†ng. B·∫°n mu·ªën xem b·∫£ng gi√° xe s·ªë kh√¥ng?",
      "Xe s·ªë (nh∆∞ Wave, Sirius) c√≥ gi√° thu√™ r·∫•t t·ªët, ch·ªâ t·ª´ 100k/ng√†y. Xe ch·∫°y b·ªÅn b·ªâ v√† d·ªÖ ƒëi·ªÅu khi·ªÉn. B·∫°n mu·ªën bi·∫øt th·ªß t·ª•c thu√™ xe s·ªë?"
    ]
  },
  { pattern: /(xe ga|xe tay ga|vision|lead|air blade|sh|grande|nvx|liberty|vespa)/i,
    keywords: ['xe ga', 'tay ga', 'vision', 'lead', 'air blade', 'sh', 'grande', 'nvx', 'liberty', 'vespa'],
    answer: [
      "Xe ga üõµ ch·∫°y √™m, c·ªëp r·ªông, ki·ªÉu d√°ng ƒë·∫πp, r·∫•t h·ª£p ƒëi trong th√†nh ph·ªë. Gi√° thu√™ xe ga nh∆∞ Vision, Lead th∆∞·ªùng t·ª´ 120k-150k/ng√†y. B·∫°n mu·ªën xem xe c·ª• th·ªÉ n√†o?",
      "D√≤ng xe ga r·∫•t ƒë∆∞·ª£c ∆∞a chu·ªông! Xe Vision v√† Lead l√† 2 l·ª±a ch·ªçn ph·ªï bi·∫øn nh·∫•t. B·∫°n c√≥ mu·ªën m√¨nh t∆∞ v·∫•n th√™m v·ªÅ ∆∞u ƒëi·ªÉm c·ªßa xe ga kh√¥ng?"
    ]
  },
  { pattern: /(50cc|xe 50|kh√¥ng c·∫ßn b·∫±ng|ch∆∞a c√≥ b·∫±ng|h·ªçc sinh|sinh vi√™n|b·∫±ng l√°i|gi·∫•y ph√©p l√°i xe|gplx)/i,
    keywords: ['50cc', 'kh√¥ng c·∫ßn b·∫±ng', 'ch∆∞a c√≥ b·∫±ng', 'h·ªçc sinh', 'sinh vi√™n', 'b·∫±ng l√°i', 'gplx'],
    exclude: ['c·∫ßn g√¨', 'th·ªß t·ª•c', 'gi·∫•y t·ªù'],
    answer: [
      "N·∫øu b·∫°n ch∆∞a c√≥ b·∫±ng l√°i, xe 50cc l√† l·ª±a ch·ªçn tuy·ªát v·ªùi! üö≤ Xe 50cc kh√¥ng y√™u c·∫ßu GPLX, ch·ªâ c·∫ßn CCCD. Xe nh·ªè g·ªçn, ti·∫øt ki·ªám xƒÉng, gi√° thu√™ c≈©ng r·∫•t r·∫ª. B·∫°n mu·ªën xem gi√° xe 50cc?",
      "B√™n m√¨nh c√≥ d√≤ng xe 50cc (nh∆∞ Giorno, Cub 50) kh√¥ng c·∫ßn b·∫±ng l√°i, r·∫•t h·ª£p cho c√°c b·∫°n h·ªçc sinh, sinh vi√™n. Th·ªß t·ª•c ch·ªâ c·∫ßn CCCD th√¥i ·∫°."
    ]
  },
  { pattern: /(th·ªß t·ª•c|gi·∫•y t·ªù|c·∫ßn g√¨|thu√™ xe c·∫ßn|ƒëi·ªÅu ki·ªán|c·ªçc|ƒë·∫∑t c·ªçc)/i,
    keywords: ['th·ªß t·ª•c', 'gi·∫•y t·ªù', 'c·∫ßn g√¨', 'ƒëi·ªÅu ki·ªán', 'c·ªçc', 'ƒë·∫∑t c·ªçc'],
    answer: [
      "Th·ªß t·ª•c thu√™ xe r·∫•t ƒë∆°n gi·∫£n! üìÑ B·∫°n ch·ªâ c·∫ßn chu·∫©n b·ªã 1 trong 2 lo·∫°i gi·∫•y t·ªù sau:\n1. CƒÉn c∆∞·ªõc c√¥ng d√¢n (CCCD) + Gi·∫•y ph√©p l√°i xe (GPLX).\n2. Ho·∫∑c Passport (H·ªô chi·∫øu) (N·∫øu l√† kh√°ch n∆∞·ªõc ngo√†i).\nB·∫°n kh√¥ng c·∫ßn ƒë·∫∑t c·ªçc ti·ªÅn m·∫∑t, ch·ªâ c·∫ßn ƒë·ªÉ l·∫°i gi·∫•y t·ªù g·ªëc khi nh·∫≠n xe ·∫°.",
      "V·ªÅ th·ªß t·ª•c, b·∫°n c·∫ßn CCCD v√† B·∫±ng l√°i xe (GPLX) nh√©. N·∫øu l√† xe 50cc th√¨ ch·ªâ c·∫ßn CCCD. B√™n m√¨nh gi·ªØ gi·∫•y t·ªù g·ªëc v√† s·∫Ω ho√†n tr·∫£ ngay khi b·∫°n tr·∫£ xe."
    ]
  },
  { pattern: /(gi√°|b·∫£ng gi√°|bao nhi√™u ti·ªÅn|nhiu ti·ªÅn|gi√° c·∫£|gi√° thu√™|thu√™ bao nhi√™u)/i,
    keywords: ['gi√°', 'bao nhi√™u ti·ªÅn', 'gi√° c·∫£', 'gi√° thu√™'],
    answer: [
      "B·∫£ng gi√° thu√™ xe r·∫•t linh ho·∫°t üí∞:\n- Xe s·ªë (Wave, Sirius): 100k - 120k/ng√†y.\n- Xe ga (Vision, Lead): 120k - 150k/ng√†y.\n- Xe c√¥n (Exciter, Winner): 200k - 250k/ng√†y.\nThu√™ c√†ng nhi·ªÅu ng√†y gi√° c√†ng r·∫ª. B·∫°n mu·ªën h·ªèi gi√° xe c·ª• th·ªÉ n√†o?",
      "Gi√° thu√™ xe dao ƒë·ªông t·ª´ 100k (xe s·ªë) ƒë·∫øn 150k (xe ga). Thu√™ theo tu·∫ßn ho·∫∑c th√°ng s·∫Ω c√≥ gi√° ∆∞u ƒë√£i h∆°n n·ªØa. B·∫°n mu·ªën thu√™ xe n√†o ƒë·ªÉ m√¨nh b√°o gi√° chi ti·∫øt?"
    ]
  },
  { pattern: /(li√™n h·ªá|sƒët|s·ªë ƒëi·ªán tho·∫°i|zalo|hotline|ƒë·ªãa ch·ªâ|·ªü ƒë√¢u|ƒë·∫øn ƒë√¢u|c·ª≠a h√†ng)/i,
    keywords: ['li√™n h·ªá', 'sƒët', 's·ªë ƒëi·ªán tho·∫°i', 'zalo', 'hotline', 'ƒë·ªãa ch·ªâ', '·ªü ƒë√¢u', 'c·ª≠a h√†ng'],
    answer: [
      "B·∫°n li√™n h·ªá Hotline/Zalo ‚òéÔ∏è 085.725.5868 ƒë·ªÉ ƒë·∫∑t xe nhanh nh·∫•t nh√©!\nƒê·ªãa ch·ªâ c·ª≠a h√†ng: [Nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n ·ªü ƒë√¢y].\nB√™n m√¨nh c√≥ h·ªó tr·ª£ giao xe t·∫≠n n∆°i mi·ªÖn ph√≠ trong n·ªôi th√†nh H√† N·ªôi ·∫°.",
      "ƒê·ªÉ ƒë·∫∑t xe, b·∫°n g·ªçi ngay 085.725.5868 (c√≥ Zalo) ·∫°. C·ª≠a h√†ng ·ªü [Nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n]. B·∫°n mu·ªën giao xe ƒë·∫øn t·∫≠n n∆°i hay qua c·ª≠a h√†ng l·∫•y xe?"
    ]
  },
  { pattern: /(giao xe|ship xe|v·∫≠n chuy·ªÉn|nh·∫≠n xe|l·∫•y xe|s√¢n bay|b·∫øn xe|t·∫≠n n∆°i)/i,
    keywords: ['giao xe', 'ship xe', 'v·∫≠n chuy·ªÉn', 'nh·∫≠n xe', 'l·∫•y xe', 's√¢n bay', 'b·∫øn xe', 't·∫≠n n∆°i'],
    answer: [
      "C√≥ ·∫°! üöÄ B√™n m√¨nh MI·ªÑN PH√ç giao nh·∫≠n xe t·∫≠n n∆°i t·∫°i c√°c qu·∫≠n n·ªôi th√†nh H√† N·ªôi, b·∫øn xe (Gi√°p B√°t, M·ªπ ƒê√¨nh, N∆∞·ªõc Ng·∫ßm...) v√† khu v·ª±c Ph·ªë C·ªï.\nCh·ªâ c·∫ßn g·ªçi 085.725.5868 l√† c√≥ xe ngay!",
      "D·ªãch v·ª• giao xe t·∫≠n n∆°i (kh√°ch s·∫°n, nh√† ri√™ng, b·∫øn xe...) l√† mi·ªÖn ph√≠ 100% trong n·ªôi th√†nh. B·∫°n ch·ªâ c·∫ßn ch·ªët xe v√† g·ª≠i ƒë·ªãa ch·ªâ, b√™n m√¨nh s·∫Ω mang xe qua."
    ]
  },
  { pattern: /^(c·∫£m ∆°n|thanks|ok|oke|tuy·ªát v·ªùi|t·ªët qu√°|hay qu√°)$/i,
    answer: [
      "Kh√¥ng c√≥ g√¨ ·∫°! B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ th√™m c·ª© h·ªèi m√¨nh nh√©. üòä",
      "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n!",
      "C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m. Li√™n h·ªá 085.725.5868 ƒë·ªÉ ƒë·∫∑t xe nha!"
    ]
  },
  { pattern: /.+/i,
    answer: [
      "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi n√†y. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ: 'Gi√° thu√™ xe', 'Th·ªß t·ª•c c·∫ßn g√¨', 'Xe ga' ho·∫∑c 'ƒê·ªãa ch·ªâ' kh√¥ng?",
      "M√¨nh ch∆∞a ƒë∆∞·ª£c l·∫≠p tr√¨nh ƒë·ªÉ tr·∫£ l·ªùi c√¢u n√†y. B·∫°n th·ª≠ h·ªèi v·ªÅ 'Xe s·ªë', 'Xe 50cc' ho·∫∑c g·ªçi 085.725.5868 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp nh√©."
    ],
    isFallback: true
  }
];

/* ---------- Utility: normalize text ---------- */
function normalizeText(text) {
  if (!text) return '';
  return text.toLowerCase()
             .normalize("NFD")
             .replace(/[\u0300-\u036f]/g, "")
             .replace(/ƒë/g, "d");
}

/* ---------- SmartAnswer function (v13 logic) ---------- */
function smartAnswer(query) {
  const normalizedQuery = normalizeText(query);
  let bestMatch = null;
  let highestScore = 0;

  for (const rule of rules) {
    if (rule.isFallback) continue;

    let score = 0;
    let match = false;
    let keywordBonus = false;

    if (rule.pattern.test(query) || rule.pattern.test(normalizedQuery)) {
      match = true;
      score = 2.0;
    }

    if (rule.keywords && rule.keywords.length > 0) {
      const queryWords = normalizedQuery.split(/\s+/);
      for (const kw of rule.keywords) {
        const normalizedKw = normalizeText(kw);
        if (normalizedQuery.includes(normalizedKw)) {
          if (queryWords.length === 1 && queryWords[0] === normalizedKw) {
            score += 1.5;
          } else {
            score += 1.0;
          }
        }
      }
    }

    if (rule.exclude && rule.exclude.length > 0) {
        let excluded = false;
        for (const ex of rule.exclude) {
            if (normalizedQuery.includes(normalizeText(ex))) {
                excluded = true;
                break;
            }
        }
        if (excluded) {
            score = 0;
            continue;
        }
    }

    if (score > highestScore) {
      highestScore = score;
      bestMatch = rule;
    }
  }

  if (bestMatch && highestScore > 0.5) {
    // choose random answer
    return bestMatch.answer[Math.floor(Math.random() * bestMatch.answer.length)];
  }

  return null;
}

/* ---------- SpellFix (auto-fix common typos) ---------- */
(function(){
  const spellMap = {
    'thue xe may': 'thu√™ xe m√°y',
    'xe so': 'xe s·ªë',
    'xe ga': 'xe ga',
    'thu tuc': 'th·ªß t·ª•c',
    'giay to': 'gi·∫•y t·ªù',
    'bang gia': 'b·∫£ng gi√°',
    'lien he': 'li√™n h·ªá',
    'thue xe ha noi': 'thu√™ xe H√† N·ªôi'
  };
  function autoFixSpelling(text){
    let fixed = text.toLowerCase();
    for(const [wrong, right] of Object.entries(spellMap)){
      const regex = new RegExp(`\\b${wrong}\\b`, 'gi');
      fixed = fixed.replace(regex, right);
    }
    return fixed;
  }
  // Wrap the sendQuery later: we will override the exposed sendQuery with a wrapper after smart engine ready
  window.__MotoAI_spellFix = autoFixSpelling;
})();

/* ---------- Theme sync (auto dark/light) ---------- */
(function(){
  const setTheme = ()=>{
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const hasBodyDark = document.body.classList.contains('dark');
    const isDark = prefersDark || hasBodyDark;
    const r = document.documentElement;
    if(isDark){
      r.style.setProperty('--m10-card-bg','#0b0c0e');
      r.style.setProperty('--bg','#0f1113');
      r.style.setProperty('--text','#f2f2f7');
      r.style.setProperty('--footer-bg','rgba(25,25,30,0.9)');
      r.style.setProperty('--glass-border','rgba(255,255,255,0.08)');
      document.body.dataset.theme='dark';
    }else{
      r.style.setProperty('--m10-card-bg','#ffffff');
      r.style.setProperty('--bg','#ffffff');
      r.style.setProperty('--text','#000000');
      r.style.setProperty('--footer-bg','rgba(255,255,255,0.8)');
      r.style.setProperty('--glass-border','rgba(0,0,0,0.08)');
      document.body.dataset.theme='light';
    }
  };
  setTheme();
  try{ window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', setTheme); }catch(e){}
  const mo = new MutationObserver(setTheme);
  mo.observe(document.body,{attributes:true,attributeFilter:['class']});
})();

/* ---------- Auto refresh corpus every 72h ---------- */
(function(){
  const now = Date.now();
  const last = parseInt(localStorage.getItem('MotoAI_lastCorpusBuild')||'0',10);
  const seventyTwoHrs = 72*60*60*1000;
  if(!last || (now-last)>seventyTwoHrs){
    try{ buildCorpusFromDOM(); }catch(e){}
    localStorage.setItem('MotoAI_lastCorpusBuild',now);
  }
})();

/* ---------- Learn from configured sites (async) ---------- */
async function learnFromMySites() {
  const relatedSites = [
    "https://motoopen.github.io/chothuexemayhanoi/",
    "https://motoopen.github.io/",
    // add more if you want
  ];

  try {
    console.log("üåê MotoAI: learning from configured sites...");
    let totalNew = 0;
    const currentCorpusTexts = new Set(corpus.map(c => c.text));
    for (const site of relatedSites) {
      try {
        const res = await fetch(site, { cache: "no-store", mode: "cors" });
        if (!res.ok) continue;
        const html = await res.text();
        const tmp = document.createElement("div");
        tmp.innerHTML = html;
        const texts = Array.from(tmp.querySelectorAll("p,h1,h2,h3,li,section,article"))
          .map(e => e.textContent.trim())
          .filter(t => t.length > 40 && !t.includes("{") && !t.includes("}"));
        texts.forEach(t => {
          if (!currentCorpusTexts.has(t)) {
            corpus.push({ id: corpus.length, text: t, tokens: tokenize(t), source: site });
            currentCorpusTexts.add(t);
            totalNew++;
          }
        });
        console.log(`‚úÖ H·ªçc t·ª´ ${site}: +${texts.length} ƒëo·∫°n.`);
      } catch (e) {
        // ignore CORS or fetch errors
      }
    }
    if (totalNew > 0) localStorage.setItem(CFG.corpusKey, JSON.stringify(corpus));
  } catch (e) {
    console.error("‚ùå L·ªói learnFromMySites:", e);
  }
}

/* ---------- Learn from repo sitemap (async) ---------- */
async function learnFromRepo(){
  try{
    const lastLearn = localStorage.getItem('MotoAI_lastLearn');
    const threeDays = 3 * 24 * 60 * 60 * 1000;
    if (lastLearn && (Date.now() - lastLearn) < threeDays) {
      console.log('‚è≥ B·ªè qua learnFromRepo: Ch∆∞a ƒë·ªß 3 ng√†y.');
      return;
    }
    const sitemap = CFG.sitemapPath || '/moto_sitemap.json';
    const res = await fetch(sitemap, { cache: 'no-store' });
    if (!res.ok) {
      console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file sitemap:', sitemap);
      return;
    }
    const data = await res.json();
    if (!data.pages || !Array.isArray(data.pages)) {
      console.log('‚ö†Ô∏è ƒê·ªãnh d·∫°ng moto_sitemap.json kh√¥ng h·ª£p l·ªá');
      return;
    }
    console.log(`üìñ MotoAI is reading ${data.pages.length} pages...`);
    let totalNew = 0;
    let currentCorpusTexts = new Set(corpus.map(c => c.text));
    for (const path of data.pages) {
      try {
        const r = await fetch(path, { cache: 'no-store' });
        if (!r.ok) continue;
        const txt = await r.text();
        const lines = txt.split(/[\r\n]+/).map(l => l.trim()).filter(l => l.length > CFG.minSentenceLength);
        lines.forEach(t => {
          if (!currentCorpusTexts.has(t)) {
            corpus.push({ id: corpus.length, text: t, tokens: tokenize(t) });
            currentCorpusTexts.add(t);
            totalNew++;
          }
        });
      } catch (e) {
        // ignore
      }
    }
    console.log('‚úÖ H·ªçc xong to√†n repo:', corpus.length, 'm·∫´u, m·ªõi th√™m', totalNew);
    try {
      localStorage.setItem(CFG.corpusKey, JSON.stringify(corpus));
      localStorage.setItem('MotoAI_lastLearn', Date.now());
    } catch (e) { }
  } catch (e) {
    console.error('‚ùå L·ªói learnFromRepo:', e);
  }
}

/* ---------- Light Mode / Menu overlay global fix (applied automatically) ---------- */
(function(){
  const cssFix = `
    #motoai-root,
    #motoai-overlay,
    #motoai-card {
      z-index: 9999 !important;
    }
    header, nav, .site-header {
      position: relative;
      z-index: 10000 !important;
    }
    body[data-theme="light"] #motoai-overlay.visible {
      background: rgba(0,0,0,0.25) !important;
    }
  `;
  const style = document.createElement('style');
  style.textContent = cssFix;
  document.head.appendChild(style);
  console.log('%c‚úÖ MotoAI Global Light Mode Fix Applied (Menu Safe)', 'color:#0a84ff;font-weight:bold;');
})();

/* ---------- Expose API & integrate smart engine with UI ---------- */

// Wrap and replace sendQuery to use smartAnswer first, fallback retrieval, then previous fallback
(function integrateSmartEngine(){
  // keep reference to old sendQuery (from part2)
  const origSend = window.__MotoAI_orig_sendQuery || sendQuery;

  async function comboSendQuery(text){
    if(!text || !text.trim()) return;
    // apply spellfix
    const fixed = (window.__MotoAI_spellFix && typeof window.__MotoAI_spellFix === 'function') ? window.__MotoAI_spellFix(text) : text;
    // basic guard
    if(sendLock) return;
    sendLock = true; sendBtn.disabled = true;
    hideTypingDots();

    // add user msg
    addMessage('user', fixed);

    // name detection
    const name = detectNameFromText(fixed);
    if(name){
      addMessage('bot', `ƒê√£ nh·ªõ t√™n: ${name} ‚ú®`);
      sendLock=false; sendBtn.disabled=false;
      setTimeout(()=> inputEl.focus(), 120);
      return;
    }

    showTypingDots();

    setTimeout(()=>{
      try{
        // smart engine first
        let ans = null;
        try{ ans = smartAnswer(fixed); }catch(e){ ans = null; }
        // fallback to retrieval if needed
        if(!ans) ans = retrieveBestAnswer(fixed);
        hideTypingDots();
        if(ans){
          addMessage('bot', ans);
        } else {
          addMessage('bot', 'Xin l·ªói, m√¨nh ch∆∞a t√¨m th·∫•y n·ªôi dung c·ª• th·ªÉ tr√™n trang n√†y ho·∫∑c b·ªô nh·ªõ h·ªçc. B·∫°n th·ª≠ h·ªèi kh√°c nha.');
        }
      }catch(e){
        hideTypingDots();
        addMessage('bot','L·ªói khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi.');
        console.error(e);
      } finally {
        sendLock=false; sendBtn.disabled=false;
        setTimeout(()=> inputEl.focus(),120);
      }
    }, 250);
  }

  // override sendQuery used by UI to call comboSendQuery
  window.MotoAI_sendQuery = comboSendQuery;
  // Also keep original pointer (for backwards compatibility)
  window.__MotoAI_orig_sendQuery = origSend;
})();

/* ---------- Bind UI events (wiring send button to combo send) ---------- */
(function bindEvents(){
  // bubble toggle
  bubble.addEventListener('click', ()=>{ if(!isOpen){ buildCorpusFromDOM(); openChat(); } else closeChat(); });
  overlay.addEventListener('click', (e)=>{ if(e.target===overlay) closeChat(); });
  closeBtn.addEventListener('click', closeChat);
  clearBtn.addEventListener('click', ()=>{ sessionMsgs=[]; saveSession(); bodyEl.innerHTML=''; addMessage('bot','üóë ƒê√£ x√≥a h·ªôi tho·∫°i.'); });

  sendBtn.addEventListener('click', ()=>{
    const v = (inputEl.value||'').trim();
    if(v){
      inputEl.value='';
      // apply a small shake
      setTimeout(() => {
        const newMsgEls = bodyEl.querySelectorAll('.m-msg.user');
        const newLast = newMsgEls[newMsgEls.length-1];
        if(newLast){
          newLast.classList.add('shake');
          setTimeout(()=> newLast.classList.remove('shake'), 280);
        }
      }, 10);
      // call unified send
      if(window.MotoAI_sendQuery) window.MotoAI_sendQuery(v);
    }
  });

  inputEl.addEventListener('keydown', (e)=>{ 
    if(e.key==='Enter' && !e.shiftKey){ 
      e.preventDefault(); 
      const v = (inputEl.value||'').trim(); 
      if(v){
        inputEl.value=''; 
        setTimeout(() => {
          const newMsgEls = bodyEl.querySelectorAll('.m-msg.user');
          const newLast = newMsgEls[newMsgEls.length-1];
          if(newLast){
            newLast.classList.add('shake');
            setTimeout(()=> newLast.classList.remove('shake'), 280);
          }
        }, 10);
        if(window.MotoAI_sendQuery) window.MotoAI_sendQuery(v);
      }
    } 
  });

  // accessible focus
  document.addEventListener('keydown',(e)=>{
    if(e.key === 'Escape' && isOpen) closeChat();
  });
})();

/* ---------- init function (bootstrap) ---------- */
function init(){
  buildSuggestions();
  loadSession();
  buildCorpusFromDOM();
  attachViewportHandler();
  adaptCardHeight();

  // small observers
  const darkSyncObserver = new MutationObserver(() => {
    const dark = document.body.classList.contains('dark');
    if (dark) { card.style.opacity = getComputedStyle(card).opacity; }
  });
  darkSyncObserver.observe(document.body, {attributes:true, attributeFilter:['class']});

  const chatObserver = new MutationObserver((mut)=>{
    mut.forEach(m=>{
      m.addedNodes.forEach(node=>{
        if(node.nodeType === 1 && node.classList.contains('m-msg') && node.classList.contains('bot')){
          node.classList.add('glow');
          setTimeout(()=> node.classList.remove('glow'), 1200);
        }
      });
    });
  });
  if(bodyEl) chatObserver.observe(bodyEl, {childList:true});

  setInterval(avoidOverlap, 1200);
  window.addEventListener('resize', ()=>{ adaptCardHeight(); setTimeout(avoidOverlap,260); });

  console.log('%c‚öôÔ∏è MotoAI v13 Combo ‚Äî UI & Core initialized', 'color:#0a84ff');
}

/* ---------- helper adapt card height ---------- */
function adaptCardHeight(){
  try{
    const vw = Math.max(document.documentElement.clientWidth, window.innerWidth||0);
    const vh = Math.max(document.documentElement.clientHeight, window.innerHeight||0);
    let h = Math.round(vh * (vw >= 900 ? 0.6 : vw >= 700 ? 0.68 : 0.78));
    h = Math.max(320, Math.min(760, h));
    card.style.height = h + 'px';
  }catch(e){}
}

/* ---------- expose API to window (single global) ---------- */
window.MotoAI = Object.assign(window.MotoAI || {}, {
  open: openChat,
  close: closeChat,
  rebuildCorpus: buildCorpusFromDOM,
  getName: getUserName,
  clearMemory: ()=>{ try{ localStorage.removeItem(CFG.memoryKeyName); }catch(e){} },
  sendQuery: (text)=>{ if(window.MotoAI_sendQuery) window.MotoAI_sendQuery(text); else sendQuery(text); },
  tokenize: tokenize,
  isSmart: true
});

/* ---------- bootstrap ---------- */
setTimeout(init, 160);

// start learning async after load
window.addEventListener('load', ()=>{
  setTimeout(async ()=>{
    await learnFromMySites();
    await learnFromRepo();
  }, 1200);
});

// final log
console.log('%cüöÄ MotoAI v13 Combo Standalone ‚Äî Full Smart + Adaptive + UI', 'color:#0a84ff;font-weight:bold;');

})(); // end of whole combo IIFE

