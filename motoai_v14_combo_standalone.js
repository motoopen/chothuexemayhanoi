/* ============================================================
  MotoAI v14 Combo Standalone ‚Äî FULL (Part 1/3)
  Ph·∫ßn 1: BOOT + SAFE UI INJECTION + HELPERS
  L∆ØU √ù: KH√îNG ƒë√≥ng IIFE ·ªü cu·ªëi ph·∫ßn n√†y. Part 2 & Part 3 n·ªëi ti·∫øp.
============================================================ */
(function(){

  // guard: tr√°nh load 2 l·∫ßn
  if (window.MotoAI_v14_COMBO_LOADED) {
    console.log('MotoAI v14 Combo already loaded.');
    return;
  }
  window.MotoAI_v14_COMBO_LOADED = true;
  console.log('%cüöÄ MotoAI v14 Combo ‚Äî PART 1/3 initializing...', 'color:#0a84ff;font-weight:bold;');

  /* ---------- CONFIG ---------- */
  const CFG = {
    uiZIndex: 9999999,
    maxCorpusSentences: 1200,
    minSentenceLength: 18,
    memoryKeyName: 'MotoAI_v14_user_name',
    corpusKey: 'MotoAI_v14_corpus',
    sessionKey: 'MotoAI_v14_session_msgs',
    sitemapPath: '/moto_sitemap.json',
    learnIntervalMs: 72 * 60 * 60 * 1000, // 72 hours
    relatedSites: [
      "https://motoopen.github.io/chothuexemayhanoi/",
      "https://motoopen.github.io/",
      "https://motoai.motoopen.vn/"
    ],
    suggestionTags: [
      { q: 'Xe s·ªë', label: 'üèç Xe s·ªë' },
      { q: 'Xe ga', label: 'üõµ Xe ga' },
      { q: 'Th·ªß t·ª•c', label: 'üìÑ Th·ªß t·ª•c' },
      { q: 'Xe 50cc', label: 'üö≤ Xe 50cc' },
      { q: 'Li√™n h·ªá 0857255868', label: '‚òéÔ∏è Li√™n h·ªá' }
    ]
  };

  /* ---------- GLOBAL STATE & API ---------- */
  window.MotoAI_v14 = window.MotoAI_v14 || {};
  window.MotoAI_v14_state = {
    isOpen: false,
    sendLock: false,
    corpus: [],
    sessionMsgs: []
  };

  // expose config
  window.MotoAI_v14.cfg = CFG;

  /* ---------- SAFE UI HTML ---------- */
  const UI_HTML = `
  <div id="motoai-root" aria-hidden="false" style="display:none" data-motoai="v14">
    <div id="motoai-bubble" role="button" aria-label="M·ªü MotoAI">ü§ñ</div>
    <div id="motoai-overlay" aria-hidden="true">
      <div id="motoai-card" role="dialog" aria-modal="true" aria-hidden="true">
        <div id="motoai-handle" aria-hidden="true"></div>
        <header id="motoai-header">
          <div class="title">MotoAI Assistant</div>
          <div class="tools">
            <button id="motoai-clear" title="X√≥a cu·ªôc tr√≤ chuy·ªán">üóë</button>
            <button id="motoai-close" title="ƒê√≥ng">‚úï</button>
          </div>
        </header>
        <main id="motoai-body" tabindex="0" role="log" aria-live="polite"></main>
        <div id="motoai-suggestions" role="toolbar" aria-label="G·ª£i √Ω nhanh"></div>
        <footer id="motoai-footer">
          <div id="motoai-typing" aria-hidden="true"></div>
          <input id="motoai-input" placeholder="Nh·∫≠p c√¢u h·ªèi..." autocomplete="off" aria-label="Nh·∫≠p c√¢u h·ªèi" />
          <button id="motoai-send" aria-label="G·ª≠i">G·ª≠i</button>
        </footer>
      </div>
    </div>
  </div>`;

  /* ---------- SAFE UI CSS ---------- */
  const UI_CSS = `
  :root{
    --m14-accent:#0a84ff;
    --m14-card-bg:#f5f7fa;
    --m14-card-bg-dark:#0b0c0e;
    --m14-radius:16px;
    --m14-blur: blur(10px) saturate(125%);
    --m14-footer-bg: rgba(255,255,255,0.82);
    --m14-text:#111;
    --m14-bg:#ffffff;
  }
  #motoai-root{position:fixed;left:18px;bottom:22px;z-index:${CFG.uiZIndex};pointer-events:none;font-family:-apple-system,Inter,system-ui,Roboto,"Helvetica Neue",Arial}
  #motoai-bubble{pointer-events:auto;width:56px;height:56px;border-radius:14px;display:flex;align-items:center;justify-content:center;font-size:26px;background:var(--m14-accent);color:#fff;box-shadow:0 8px 28px rgba(2,6,23,0.35);cursor:pointer;transition:transform .14s}
  #motoai-bubble:hover{transform:scale(1.06)}
  #motoai-overlay{position:fixed;inset:0;display:flex;align-items:flex-end;justify-content:center;padding:12px;pointer-events:none;transition:background .22s ease;z-index:${CFG.uiZIndex-1}}
  #motoai-overlay.visible{background:rgba(0,0,0,0.36);pointer-events:auto}
  #motoai-card{width:min(920px,calc(100% - 40px));max-width:920px;border-radius:var(--m14-radius) var(--m14-radius) 10px 10px;height:72vh;max-height:760px;min-height:300px;background:var(--m14-card-bg);backdrop-filter:var(--m14-blur);box-shadow:0 -18px 60px rgba(0,0,0,0.28);display:flex;flex-direction:column;overflow:hidden;transform:translateY(110%);opacity:0;pointer-events:auto;transition:transform .36s cubic-bezier(.2,.9,.2,1),opacity .28s;color:var(--m14-text)}
  #motoai-overlay.visible #motoai-card{transform:translateY(0);opacity:1}
  #motoai-handle{width:64px;height:6px;background:rgba(160,160,160,0.6);border-radius:6px;margin:10px auto}
  #motoai-header{display:flex;align-items:center;justify-content:space-between;padding:8px 14px;font-weight:700;color:var(--m14-accent);border-bottom:1px solid rgba(0,0,0,0.06)}
  #motoai-header .tools button{background:none;border:none;font-size:18px;cursor:pointer;padding:6px 8px;color:var(--m14-text)}
  #motoai-body{flex:1;overflow:auto;padding:12px 16px;font-size:15px;background:transparent}
  .m-msg{margin:8px 0;padding:12px 14px;border-radius:16px;max-width:86%;line-height:1.4;word-break:break-word;box-shadow:0 6px 18px rgba(2,6,23,0.08)}
  .m-msg.bot{background:rgba(255,255,255,0.92);color:#111}
  .m-msg.user{background:linear-gradient(180deg,var(--m14-accent),#0066d9);color:#fff;margin-left:auto;box-shadow:0 8px 26px rgba(10,132,255,0.15)}
  #motoai-suggestions{display:flex;gap:8px;justify-content:center;padding:8px 12px;border-top:1px solid rgba(0,0,0,0.04);flex-wrap:wrap;background:rgba(255,255,255,0.62);backdrop-filter:blur(8px)}
  #motoai-suggestions button{border:none;background:rgba(0,122,255,0.08);color:var(--m14-accent);padding:8px 12px;border-radius:12px;cursor:pointer;font-weight:600}
  #motoai-footer{display:flex;align-items:center;justify-content:center;gap:8px;padding:10px;border-top:1px solid rgba(0,0,0,0.06);background:var(--m14-footer-bg);backdrop-filter:blur(8px)}
  #motoai-input{flex:1;padding:10px 12px;border-radius:12px;border:1px solid rgba(0,0,0,0.08);font-size:15px;background:var(--m14-bg);color:var(--m14-text)}
  #motoai-send{background:var(--m14-accent);color:#fff;border:none;border-radius:12px;padding:10px 16px;cursor:pointer;flex-shrink:0;transition:transform .18s}
  #motoai-send:hover{transform:scale(1.06)}
  @media (prefers-color-scheme:dark){
    :root{--m14-card-bg:var(--m14-card-bg-dark);--m14-footer-bg:rgba(16,16,18,0.9);--m14-text:#f2f2f7}
    .m-msg.bot{background:rgba(35,37,39,0.9);color:var(--m14-text)}
    .m-msg.user{background:linear-gradient(180deg,#0a84ff,#0071e3)}
    #motoai-suggestions{background:rgba(20,20,22,0.9)}
    #motoai-header .tools button{color:var(--m14-text)}
  }
  @media (max-width:520px){
    #motoai-card{width:calc(100% - 24px);height:78vh;min-height:260px}
    #motoai-bubble{width:50px;height:50px;font-size:24px;border-radius:12px}
  }
  /* Force visible helpers (in case host site hides things) */
  #motoai-root,#motoai-bubble,#motoai-overlay,#motoai-card{visibility:visible!important}
  `;

  /* ---------- Safe inject (DOM ready) ---------- */
  function safeInjectUI(){
    try{
      if(document.getElementById('motoai-root')) return; // already injected
      if(!document.body || !document.head){
        console.warn('MotoAI v14: DOM not ready for UI injection.');
        return;
      }
      document.body.insertAdjacentHTML('beforeend', UI_HTML);
      const styleEl = document.createElement('style');
      styleEl.setAttribute('data-motoai','v14-style');
      styleEl.textContent = UI_CSS;
      document.head.appendChild(styleEl);
      // ensure visible
      const root = document.getElementById('motoai-root');
      if(root) root.style.display = '';
      console.log('%c‚úÖ MotoAI v14 UI injected (PART 1)', 'color:#0a84ff');
    }catch(e){
      console.error('MotoAI v14 safeInjectUI error:', e);
    }
  }

  if(document.readyState === 'loading'){
    document.addEventListener('DOMContentLoaded', safeInjectUI);
  } else {
    try { safeInjectUI(); } catch(e){ /* ignore */ }
  }

  /* ---------- Helpers (tokenize, normalize) ---------- */
  function tokenizeSafe(str){
    if(!str) return [];
    try{
      return String(str).toLowerCase().replace(/[^\p{L}\p{N}\s]+/gu,' ').split(/\s+/).filter(Boolean);
    }catch(e){
      return String(str).toLowerCase().replace(/[^a-z0-9\u00C0-\u024F\s]+/gi,' ').split(/\s+/).filter(Boolean);
    }
  }

  function normalizeLite(s){
    if(!s) return '';
    return String(s).toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g,'').replace(/ƒë/g,'d').trim();
  }

  // Expose helpers & minimal API for Part2/3
  window.MotoAI_v14.tokenizeSafe = tokenizeSafe;
  window.MotoAI_v14.normalizeLite = normalizeLite;
  window.MotoAI_v14.safeInjectUI = safeInjectUI;
  window.MotoAI_v14.isReady = function(){ return !!document.getElementById('motoai-root'); };

  /* ---------- Small debug helper: ensure root exists by timeout (robust) ---------- */
  (function ensureRootRetry(){
    let tries = 0;
    function tryIt(){
      tries++;
      if(window.MotoAI_v14.isReady()){
        console.log('%c‚ÑπÔ∏è MotoAI v14 root ready.', 'color:#0a84ff');
        return;
      }
      if(tries > 8) {
        // try one last time but don't spam
        if(document.body) safeInjectUI();
        return;
      }
      setTimeout(()=>{ safeInjectUI(); tryIt(); }, 250);
    }
    tryIt();
  })();

  /* ---------- placeholders for DOM refs (will be populated in Part2) ---------- */
  // IDs used: #motoai-root, #motoai-bubble, #motoai-overlay, #motoai-card,
  // #motoai-body, #motoai-input, #motoai-send, #motoai-close, #motoai-clear, #motoai-typing, #motoai-suggestions

  /* ---------- End of PART 1/3 ----------
     Next: Part 2/3 (corpus, session, UI wiring, open/close, sendQuery basic)
     (DO NOT close the IIFE here; Part 2/3 will continue inside.)
  */

 
/* ============================================================
  MotoAI v14 Combo Standalone ‚Äî FULL (Part 2/3)
  Ph·∫ßn 2: SESSION + UI + BASIC ENGINE + G·ª¢I √ù
============================================================ */

  const STATE = window.MotoAI_v14_state;
  const CFG = window.MotoAI_v14.cfg;

  /* ---------- DOM GETTERS ---------- */
  function getEls() {
    return {
      root: document.getElementById("motoai-root"),
      bubble: document.getElementById("motoai-bubble"),
      overlay: document.getElementById("motoai-overlay"),
      card: document.getElementById("motoai-card"),
      body: document.getElementById("motoai-body"),
      input: document.getElementById("motoai-input"),
      send: document.getElementById("motoai-send"),
      close: document.getElementById("motoai-close"),
      clear: document.getElementById("motoai-clear"),
      typing: document.getElementById("motoai-typing"),
      sugWrap: document.getElementById("motoai-suggestions")
    };
  }

  /* ---------- STORAGE ---------- */
  function saveSession() {
    try {
      sessionStorage.setItem(CFG.sessionKey, JSON.stringify(STATE.sessionMsgs));
    } catch {}
  }
  function loadSession() {
    try {
      const d = sessionStorage.getItem(CFG.sessionKey);
      STATE.sessionMsgs = d ? JSON.parse(d) : [];
    } catch { STATE.sessionMsgs = []; }
  }

  function saveCorpus() {
    try {
      localStorage.setItem(CFG.corpusKey, JSON.stringify(STATE.corpus));
    } catch {}
  }
  function loadCorpus() {
    try {
      const d = localStorage.getItem(CFG.corpusKey);
      STATE.corpus = d ? JSON.parse(d) : [];
    } catch { STATE.corpus = []; }
  }

  /* ---------- C·ªòNG D·ªíN D·ªÆ LI·ªÜU H·ªåC TR√äN TRANG ---------- */
  function buildCorpusFromDOM() {
    try {
      loadCorpus();
      let texts = [];
      const nodes = Array.from(document.querySelectorAll("main,article,section"));
      nodes.forEach((n) => {
        Array.from(n.querySelectorAll("p,li,h1,h2,h3")).forEach((el) => {
          const t = (el.innerText || "").trim();
          if (t.length > CFG.minSentenceLength) texts.push(t);
        });
      });
      if (!texts.length) {
        const all = document.body.innerText.split(/[.!?]\s+/);
        texts = all.filter((t) => t.length > CFG.minSentenceLength);
      }
      const unique = Array.from(new Set(texts));
      const current = new Set(STATE.corpus.map((c) => c.text));
      unique.forEach((t) => {
        if (!current.has(t)) {
          STATE.corpus.push({ id: STATE.corpus.length, text: t, tokens: MotoAI_v14.tokenizeSafe(t) });
        }
      });
      saveCorpus();
      console.log(`üìö MotoAI: Corpus ${STATE.corpus.length} sentences.`);
    } catch (e) {
      console.error("MotoAI buildCorpusFromDOM error", e);
    }
  }

  /* ---------- RETRIEVAL ---------- */
  function retrieveBest(q) {
    if (!q || !STATE.corpus.length) return null;
    const qTokens = MotoAI_v14.tokenizeSafe(q);
    let best = { score: 0, text: null };
    for (const c of STATE.corpus) {
      let sc = 0;
      for (const t of qTokens) if (c.tokens && c.tokens.includes(t)) sc++;
      if (c.text.toLowerCase().includes(q.toLowerCase())) sc += 0.5;
      if (sc > best.score) best = { score: sc, text: c.text };
    }
    return best.score ? best.text : null;
  }

  /* ---------- UI MESSAGE ---------- */
  function addMsg(role, text) {
    const el = getEls();
    const div = document.createElement("div");
    div.className = "m-msg " + (role === "user" ? "user" : "bot");
    div.textContent = text;
    el.body.appendChild(div);
    el.body.scrollTop = el.body.scrollHeight;
    STATE.sessionMsgs.push({ role, text, t: Date.now() });
    saveSession();
  }

  function showTyping() {
    const t = getEls().typing;
    if (t) t.innerHTML = "<span>...</span>";
  }
  function hideTyping() {
    const t = getEls().typing;
    if (t) t.innerHTML = "";
  }

  /* ---------- G·ª¢I √ù NHANH ---------- */
  function buildSuggestions() {
    const wrap = getEls().sugWrap;
    if (!wrap) return;
    wrap.innerHTML = "";
    CFG.suggestionTags.forEach((s) => {
      const b = document.createElement("button");
      b.textContent = s.label;
      b.addEventListener("click", () => {
        openChat();
        setTimeout(() => sendBasic(s.q), 200);
      });
      wrap.appendChild(b);
    });
  }

  /* ---------- PH√ÅT HI·ªÜN T√äN ---------- */
  function detectName(text) {
    const n = (text || "").trim();
    const p = /(t√™n t√¥i l√†|m√¨nh t√™n l√†|t√¥i l√†)\s+([A-Za-z√Ä-·ªπ0-9 ]+)/i;
    const m = n.match(p);
    if (m && m[2]) {
      const nm = m[2].trim();
      localStorage.setItem(CFG.memoryKeyName, nm);
      return nm;
    }
    return null;
  }

  /* ---------- M·ªû / ƒê√ìNG GIAO DI·ªÜN ---------- */
  function openChat() {
    const el = getEls();
    if (STATE.isOpen) return;
    el.overlay.classList.add("visible");
    el.card.setAttribute("aria-hidden", "false");
    STATE.isOpen = true;
    if (!STATE.sessionMsgs.length) addMsg("bot", "üëã Xin ch√†o! M√¨nh l√† MotoAI ‚Äî h·ªèi th·ª≠ ‚ÄúXe ga‚Äù, ‚ÄúXe s·ªë‚Äù, ho·∫∑c ‚ÄúTh·ªß t·ª•c‚Äù nh√©!");
    el.input.focus();
  }

  function closeChat() {
    const el = getEls();
    el.overlay.classList.remove("visible");
    el.card.setAttribute("aria-hidden", "true");
    STATE.isOpen = false;
    hideTyping();
  }

  /* ---------- BASIC TR·∫¢ L·ªúI ---------- */
  function sendBasic(text) {
    if (!text.trim()) return;
    const el = getEls();
    if (STATE.sendLock) return;
    STATE.sendLock = true;
    addMsg("user", text);
    showTyping();
    setTimeout(() => {
      try {
        const nm = detectName(text);
        if (nm) {
          addMsg("bot", `ƒê√£ nh·ªõ t√™n b·∫°n l√† ${nm} ‚ú®`);
        } else {
          const ans = retrieveBest(text) || "M√¨nh ch∆∞a t√¨m th·∫•y c√¢u tr·∫£ l·ªùi. B·∫°n th·ª≠ h·ªèi kh√°c nha!";
          addMsg("bot", ans);
        }
      } catch (e) {
        addMsg("bot", "L·ªói x·ª≠ l√Ω c√¢u h·ªèi.");
      }
      hideTyping();
      STATE.sendLock = false;
    }, 300);
  }

  /* ---------- G·∫ÆN S·ª∞ KI·ªÜN UI ---------- */
  function bindUI() {
    const el = getEls();
    if (!el.bubble) return;

    el.bubble.onclick = () => {
      if (!STATE.isOpen) {
        buildCorpusFromDOM();
        openChat();
      } else closeChat();
    };
    el.close.onclick = closeChat;
    el.overlay.addEventListener("click", (e) => { if (e.target === el.overlay) closeChat(); });
    el.clear.onclick = () => {
      STATE.sessionMsgs = [];
      el.body.innerHTML = "";
      addMsg("bot", "üßπ ƒê√£ x√≥a h·ªôi tho·∫°i!");
    };
    el.send.onclick = () => {
      const v = el.input.value.trim();
      el.input.value = "";
      sendBasic(v);
    };
    el.input.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        const v = el.input.value.trim();
        el.input.value = "";
        sendBasic(v);
      }
    });

    buildSuggestions();
    console.log("%c‚úÖ MotoAI v14 UI bound (Part 2)", "color:#0a84ff");
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", bindUI);
  } else bindUI();

  /* ---------- G·∫ÆN API RA NGO√ÄI ---------- */
  window.MotoAI_v14.open = openChat;
  window.MotoAI_v14.close = closeChat;
  window.MotoAI_v14.addMsg = addMsg;
  window.MotoAI_v14.sendBasic = sendBasic;
  window.MotoAI_v14.rebuildCorpus = buildCorpusFromDOM;

  console.log("%c‚öôÔ∏è MotoAI v14 Combo ‚Äî Part 2/3 ready.", "color:#0a84ff");

  /* ---------- End of PART 2/3 ----------
     (Next: Part 3/3 ‚Äî Smart Engine, LearnFromRepo, LearnFromSites, Auto Theme)
  */

  /* ============================================================
  MotoAI v14 Combo Standalone ‚Äî FULL (Part 3/3)
  Ph·∫ßn 3: SMART ENGINE + LEARN + THEME SYNC + FINAL BOOTSTRAP
  (Paste tr·ª±c ti·∫øp sau Part 2, file k·∫øt th√∫c ·ªü cu·ªëi ph·∫ßn n√†y)
============================================================ */

  // safe refs
  const TOKENIZE = window.MotoAI_v14.tokenizeSafe;
  const NORMALIZE = window.MotoAI_v14.normalizeLite || window.MotoAI_v14.normalizeText || (s=>String(s||'').toLowerCase());

  /* ---------- SpellFix map (extendable) ---------- */
  const SPELL_FIX = {
    'thue xe may': 'thu√™ xe m√°y',
    'thue xe ha noi': 'thu√™ xe h√† n·ªôi',
    'xe so': 'xe s·ªë',
    'xe ga': 'xe ga',
    'thu tuc': 'th·ªß t·ª•c',
    'giay to': 'gi·∫•y t·ªù',
    'bang gia': 'b·∫£ng gi√°',
    'lien he': 'li√™n h·ªá'
  };
  function applySpellFix(text){
    if(!text) return text;
    let t = String(text);
    Object.keys(SPELL_FIX).forEach(k=>{
      const re = new RegExp('\\b'+k+'\\b','gi');
      t = t.replace(re, SPELL_FIX[k]);
    });
    return t;
  }

  /* ---------- Smart Engine rules (v14 improved) ---------- */
  const RULES = [
    { pattern: /^(ch√†o|hi|hello|alo|xin ch√†o|h·ªó tr·ª£|gi√∫p|h√£y gi√∫p|support)$/i,
      answers: ["Ch√†o b·∫°n! M√¨nh l√† MotoAI ü§ñ. M√¨nh c√≥ th·ªÉ gi√∫p g√¨ v·ªÅ thu√™ xe m√°y?", "Xin ch√†o! B·∫°n c·∫ßn h·ªèi v·ªÅ xe hay th·ªß t·ª•c?"] },
    { pattern: /(xe s·ªë|wave|sirius|blade|future|exciter|winner|ex150)/i,
      answers: ["Xe s·ªë ti·∫øt ki·ªám xƒÉng, ph√π h·ª£p ƒëi ph·ªë v√† ph∆∞·ª£t nh·∫π. Gi√° thu√™ t·ª´ ~100k/ng√†y.", "B·∫°n mu·ªën xem b·∫£ng gi√° xe s·ªë hay th·ªß t·ª•c thu√™?"] },
    { pattern: /(xe ga|vision|lead|air blade|sh|vespa|grande)/i,
      answers: ["Xe ga √™m, c·ªëp r·ªông; gi√° thu√™ th∆∞·ªùng 120k‚Äì150k/ng√†y.", "B·∫°n mu·ªën m√¨nh g·ª£i √Ω m·∫´u xe ga ph√π h·ª£p kh√¥ng?"] },
    { pattern: /(50cc|xe 50|kh√¥ng c·∫ßn b·∫±ng|khong can bang|chua co bang)/i,
      answers: ["Xe 50cc kh√¥ng c·∫ßn GPLX (ch·ªâ CCCD). R·∫•t ph√π h·ª£p h·ªçc sinh/sinh vi√™n.", "B·∫°n mu·ªën xem gi√° ho·∫∑c m·∫´u 50cc?"] },
    { pattern: /(th·ªß t·ª•c|thu tuc|gi·∫•y t·ªù|giay to|c·∫ßn g√¨|can gi|ƒëi·ªÅu ki·ªán)/i,
      answers: ["Th·ªß t·ª•c: CCCD + GPLX. Xe 50cc ch·ªâ c·∫ßn CCCD. Ch√∫ng t√¥i gi·ªØ gi·∫•y t·ªù g·ªëc khi nh·∫≠n xe.", "B·∫°n mu·ªën m√¨nh g·ª≠i checklist th·ªß t·ª•c chi ti·∫øt?"] },
    { pattern: /(gi√°|b·∫£ng gi√°|bao nhi√™u|gia thue|bang gia)/i,
      answers: ["B·∫£ng gi√°: Xe s·ªë 100k‚Äì120k/ng√†y; Xe ga 120k‚Äì150k/ng√†y; Xe c√¥n 200k‚Äì250k/ng√†y.", "B·∫°n c·∫ßn b√°o gi√° theo ng√†y/tu·∫ßn/th√°ng?"] },
    { pattern: /(li√™n h·ªá|lien he|hotline|zalo|sƒët|sdt|s·ªë ƒëi·ªán tho·∫°i)/i,
      answers: ["Li√™n h·ªá Hotline/Zalo: 085.725.5868. G·ªçi ho·∫∑c nh·∫Øn Zalo ƒë·ªÉ ƒë·∫∑t xe nhanh.", "B·∫°n mu·ªën m√¨nh g·ªçi gi√∫p ƒë·∫∑t xe (m√¥ ph·ªèng)?" ] },
    { pattern: /(giao xe|ship|v·∫≠n chuy·ªÉn|van chuyen|s√¢n bay|ben xe|t·∫≠n n∆°i)/i,
      answers: ["Ch√∫ng t√¥i giao xe t·∫≠n n∆°i trong n·ªôi th√†nh H√† N·ªôi ‚Äî mi·ªÖn ph√≠ theo ch√≠nh s√°ch.", "Giao nh·∫≠n t·∫≠n n∆°i c√≥ h·ªó tr·ª£ s√¢n bay v√† b·∫øn xe. B·∫°n c·∫ßn giao ƒë·∫øn ƒë√¢u?"] },
    { pattern: /^(c·∫£m ∆°n|cam on|thanks|ok|oke|tuy·ªát v·ªùi)$/i,
      answers: ["Kh√¥ng c√≥ g√¨ ·∫°! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n üòä", "C·∫£m ∆°n b·∫°n ‚Äî li√™n h·ªá 085.725.5868 khi c·∫ßn nh√©!"] }
  ];
  const FALLBACK = [
    "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu r√µ. B·∫°n th·ª≠ h·ªèi 'Gi√° thu√™ xe', 'Xe ga', 'Th·ªß t·ª•c' ho·∫∑c 'Li√™n h·ªá' nh√©.",
    "M√¨nh ch∆∞a c√≥ d·ªØ li·ªáu cho c√¢u h·ªèi n√†y. B·∫°n th·ª≠ ƒë·∫∑t c√¢u ng·∫Øn h∆°n ho·∫∑c h·ªèi v·ªÅ lo·∫°i xe c·ª• th·ªÉ."
  ];

  /* ---------- Smart answer function ---------- */
  function smartAnswer(query){
    if(!query) return null;
    const qNorm = NORMALIZE(query);
    let best = null; let bestScore = 0;
    for(const r of RULES){
      try{
        if(r.pattern.test(query) || r.pattern.test(qNorm)) {
          bestScore = 100; best = r; break;
        }
      }catch(e){}
    }
    if(best){
      const arr = best.answers || [];
      if(arr.length) return arr[Math.floor(Math.random()*arr.length)];
    }
    // fallback to retrieval
    const ret = retrieveBest(query);
    if(ret) return ret;
    // final fallback
    return FALLBACK[Math.floor(Math.random()*FALLBACK.length)];
  }

  /* ---------- Learn from relatedSites (external domains) ---------- */
  async function learnFromMySites(){
    try{
      console.log('%cüåê MotoAI: learnFromMySites start', 'color:#0a84ff');
      let added = 0;
      const seen = new Set(STATE.corpus.map(c=>c.text));
      for(const site of (CFG.relatedSites || [])){
        try{
          const res = await fetch(site, { cache: 'no-store', mode: 'cors' });
          if(!res.ok){ console.warn('MotoAI: fetch failed', site, res.status); continue; }
          const html = await res.text();
          const tmp = document.createElement('div');
          tmp.innerHTML = html;
          const nodes = Array.from(tmp.querySelectorAll('p,h1,h2,h3,li,section,article'));
          const texts = nodes.map(n => (n.textContent||'').trim()).filter(t => t.length > 40);
          for(const t of texts){
            if(!seen.has(t)){
              STATE.corpus.push({ id: STATE.corpus.length, text: t, tokens: TOKENIZE(t), source: site });
              seen.add(t);
              added++;
            }
          }
          console.log(`‚úÖ MotoAI: learned ${texts.length} from ${site} (new +${added})`);
        }catch(e){
          // ignore CORS errors
          console.warn('MotoAI: learnFromMySites error', site);
        }
      }
      if(added>0) saveCorpus();
      console.log('%cüìò MotoAI: learnFromMySites complete, new:', 'color:#0a84ff', added);
    }catch(e){
      console.error('MotoAI learnFromMySites error', e);
    }
  }

  /* ---------- Learn from repo sitemap ---------- */
  async function learnFromRepo(){
    try{
      const last = parseInt(localStorage.getItem(CFG.lastLearnKey) || '0', 10);
      if(last && (Date.now() - last) < CFG.learnIntervalMs){
        console.log('MotoAI: skip learnFromRepo (recent)');
        return;
      }
      const sitemap = CFG.sitemapPath;
      console.log('%cüìñ MotoAI: learnFromRepo reading', sitemap, '...', 'color:#0a84ff');
      const res = await fetch(sitemap, { cache: 'no-store' });
      if(!res.ok){ console.warn('MotoAI: sitemap fetch failed', sitemap); return; }
      const data = await res.json();
      if(!data || !Array.isArray(data.pages)){ console.warn('MotoAI: sitemap format invalid'); return; }
      let added = 0;
      const seen = new Set(STATE.corpus.map(c=>c.text));
      for(const p of data.pages){
        try{
          const r = await fetch(p, { cache:'no-store' });
          if(!r.ok) continue;
          const txt = await r.text();
          const tmp = document.createElement('div');
          tmp.innerHTML = txt;
          const nodes = Array.from(tmp.querySelectorAll('p,h1,h2,h3,li,section,article'));
          const lines = nodes.map(n => (n.textContent||'').trim()).filter(t => t.length > CFG.minSentenceLength);
          for(const t of lines){
            if(!seen.has(t)){
              STATE.corpus.push({ id: STATE.corpus.length, text: t, tokens: TOKENIZE(t), source: p });
              seen.add(t);
              added++;
            }
          }
        }catch(e){}
      }
      if(added>0) saveCorpus();
      localStorage.setItem(CFG.lastLearnKey, Date.now());
      console.log('%c‚úÖ MotoAI: learnFromRepo complete, new items:', 'color:#0a84ff', added);
    }catch(e){
      console.error('MotoAI learnFromRepo error', e);
    }
  }

  /* ---------- Enhanced sendQuery (smart) ---------- */
  function smartSendQuery(origText){
    if(!origText || !origText.trim()) return;
    const text = applySpellFix(origText);
    const els = getEls();
    if(STATE.sendLock) return;
    STATE.sendLock = true;
    if(els.send) els.send.disabled = true;

    addMsg('user', text);

    const name = detectName(text);
    if(name){
      addMsg('bot', `ƒê√£ nh·ªõ t√™n: ${name} ‚ú®`);
      STATE.sendLock = false;
      if(els.send) els.send.disabled = false;
      return;
    }

    showTyping();
    setTimeout(()=>{
      try{
        const reply = smartAnswer(text);
        hideTyping();
        if(reply) addMsg('bot', reply);
        else addMsg('bot', 'M√¨nh ch∆∞a t√¨m ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi, th·ª≠ h·ªèi kh√°c nh√©.');
      }catch(e){
        hideTyping();
        addMsg('bot', 'L·ªói khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi.');
        console.error(e);
      }finally{
        STATE.sendLock = false;
        if(els.send) els.send.disabled = false;
      }
    }, 200);
  }

  // override basic send with smart
  window.MotoAI_v14.sendQuery = smartSendQuery;

  /* ---------- Bootstrap final actions ---------- */
  function finalBoot(){
    try{
      // bind UI if not yet
      try{ if(typeof bindUI === 'function') bindUI(); }catch(e){}
      // load session & corpus, build corpus from DOM
      try{ loadSession(); loadCorpus(); buildCorpusFromDOM(); }catch(e){}
      // build suggestions UI
      try{ buildSuggestions(); }catch(e){}
      // bind smart send (already assigned)
      // schedule learns
      setTimeout(()=>{ learnFromMySites(); }, 900);
      setTimeout(()=>{ learnFromRepo(); }, 1600);
      // periodic rebuild guard
      setInterval(()=>{ try{ buildCorpusFromDOM(); }catch(e){} }, 1000 * 60 * 60 * 6); // every 6h rebuild small
      // small log
      console.log('%cüöÄ MotoAI v14 ‚Äî Final bootstrap complete. AI ready!', 'color:#0a84ff;font-weight:bold;');
    }catch(e){
      console.error('MotoAI finalBoot error', e);
    }
  }

  // run final boot when DOM fully loaded
  if(document.readyState === 'loading'){
    document.addEventListener('DOMContentLoaded', finalBoot);
  } else {
    setTimeout(finalBoot, 80);
  }

  // expose some API utilities
  Object.assign(window.MotoAI_v14, {
    smartAnswer,
    learnFromMySites,
    learnFromRepo,
    applySpellFix,
    getCorpus: ()=>STATE.corpus,
    getSession: ()=>STATE.sessionMsgs,
    rebuildCorpus: buildCorpusFromDOM
  });

  // final end of IIFE (Part 3 closes the whole file)
})(); // END MotoAI v14 Combo Standalone ‚Äî FULL (Parts 1+2+3)


