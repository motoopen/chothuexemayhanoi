/* motoai_v14_combo_standalone.js  ‚Äî PART 1/3
   MotoAI v14 Combo Standalone ‚Äî Part 1: BOOT + UI CORE + SAFE INJECT
   NOTE: This file is intended to be assembled from Part1 + Part2 + Part3 into one final file.
   Copy Part1, then append Part2, then Part3 to produce motoai_v14_combo_standalone.js
*/
(function(){
  // guard: avoid double-load
  if(window.MotoAI_v14_COMBO_LOADED){
    console.log('MotoAI v14 Combo already loaded.');
    return;
  }
  window.MotoAI_v14_COMBO_LOADED = true;
  console.log('%c‚úÖ MotoAI v14 Combo ‚Äî initializing (PART 1/3)...', 'color:#0a84ff;font-weight:bold;');

  /* ---------- CONFIG ---------- */
  const CFG = {
    maxCorpusSentences: 900,
    minSentenceLength: 18,
    suggestionTags: [
      {q:'Xe s·ªë', label:'üèç Xe s·ªë'},
      {q:'Xe ga', label:'üõµ Xe ga'},
      {q:'Th·ªß t·ª•c', label:'üìÑ Th·ªß t·ª•c'},
      {q:'Xe 50cc', label:'üö≤ Xe 50cc'},
      {q:'Li√™n h·ªá 0857255868', label:'‚òéÔ∏è Li√™n h·ªá'}
    ],
    memoryKeyName: 'MotoAI_v14_combo_user_name',
    corpusKey: 'MotoAI_v14_combo_corpus',
    sessionKey: 'MotoAI_v14_combo_session_msgs',
    sitemapPath: '/moto_sitemap.json',
    uiZIndex: 9999999
  };

  /* ---------- SAFE INJECT: HTML + CSS ---------- */
  const uiHtml = `
  <div id="motoai-root" aria-hidden="false" data-motoai="v14" style="display:none">
    <div id="motoai-bubble" role="button" aria-label="M·ªü MotoAI">ü§ñ</div>
    <div id="motoai-overlay" aria-hidden="true">
      <div id="motoai-card" role="dialog" aria-modal="true" aria-hidden="true">
        <div id="motoai-handle" aria-hidden="true"></div>
        <header id="motoai-header">
          <div class="title">MotoAI Assistant</div>
          <div class="tools">
            <button id="motoai-clear" title="X√≥a cu·ªôc tr√≤ chuy·ªán">üóë</button>
            <button id="motoai-close" title="ƒê√≥ng">‚úï</button>
          </div>
        </header>
        <main id="motoai-body" tabindex="0" role="log" aria-live="polite"></main>
        <div id="motoai-suggestions" role="toolbar" aria-label="G·ª£i √Ω nhanh"></div>
        <footer id="motoai-footer">
          <div id="motoai-typing" aria-hidden="true"></div>
          <input id="motoai-input" placeholder="Nh·∫≠p c√¢u h·ªèi..." autocomplete="off" aria-label="Nh·∫≠p c√¢u h·ªèi"/>
          <button id="motoai-send" aria-label="G·ª≠i">G·ª≠i</button>
        </footer>
      </div>
    </div>
  </div>`;

  const uiCss = `
  :root{
    --m14-accent:#0a84ff;
    --m14-card-bg: #f5f7fa;
    --m14-card-bg-dark:#0b0c0e;
    --m14-blur: blur(10px) saturate(125%);
    --m14-radius:16px;
    --m14-glass-border: rgba(0,0,0,0.06);
    --m14-footer-bg: rgba(255,255,255,0.78);
    --m14-text: #111;
    --m14-bg: #fff;
  }

  #motoai-root { position: fixed; left: 18px; bottom: 22px; z-index: ${CFG.uiZIndex}; pointer-events: none; font-family: -apple-system, Inter, system-ui, Roboto, "Helvetica Neue", Arial; }
  #motoai-bubble {
    pointer-events: auto; width:56px; height:56px; border-radius:14px;
    display:flex;align-items:center;justify-content:center;font-size:26px;
    background:var(--m14-accent); color:#fff; box-shadow:0 8px 28px rgba(2,6,23,0.35); cursor:pointer; transition:transform .14s ease;
  }
  #motoai-bubble:hover{ transform: scale(1.06); }

  #motoai-overlay{
    position:fixed; inset:0; display:flex; align-items:flex-end; justify-content:center;
    padding:12px; pointer-events:none; transition:background .22s ease; z-index:${CFG.uiZIndex-1};
  }
  #motoai-overlay.visible{ background: rgba(0,0,0,0.36); pointer-events:auto; }

  #motoai-card{
    width:min(920px,calc(100% - 40px)); max-width:920px; border-radius: var(--m14-radius) var(--m14-radius) 10px 10px;
    height:70vh; max-height:740px; min-height:300px; background:var(--m14-card-bg);
    backdrop-filter: var(--m14-blur); box-shadow: 0 -18px 60px rgba(0,0,0,0.28);
    display:flex; flex-direction:column; overflow:hidden; transform: translateY(110%); opacity:0; pointer-events:auto;
    transition: transform .36s cubic-bezier(.2,.9,.2,1), opacity .28s;
    color:var(--m14-text);
  }
  #motoai-overlay.visible #motoai-card { transform: translateY(0); opacity:1; }

  #motoai-handle { width:64px; height:6px; background: rgba(160,160,160,0.6); border-radius:6px; margin:10px auto; }
  #motoai-header{ display:flex; align-items:center; justify-content:space-between; padding:8px 14px; font-weight:700; color:var(--m14-accent); border-bottom:1px solid rgba(0,0,0,0.06); }
  #motoai-header .tools button { background:none; border:none; font-size:18px; cursor:pointer; padding:6px 8px; color:var(--m14-text); }
  #motoai-body{ flex:1; overflow:auto; padding:12px 16px; font-size:15px; background:transparent; -webkit-overflow-scrolling:touch; }
  #motoai-suggestions{ display:flex; gap:8px; justify-content:center; padding:8px 12px; border-top:1px solid rgba(0,0,0,0.04); flex-wrap:wrap; background: rgba(255,255,255,0.62); backdrop-filter: blur(8px); }
  #motoai-suggestions button { border:none; background: rgba(0,122,255,0.08); color:var(--m14-accent); padding:8px 12px; border-radius:12px; cursor:pointer; font-weight:600; }

  #motoai-footer{ display:flex; align-items:center; gap:8px; padding:10px; border-top:1px solid var(--m14-glass-border); background:var(--m14-footer-bg); }
  #motoai-input{ flex:1; padding:10px 12px; border-radius:12px; border:1px solid var(--m14-glass-border); font-size:15px; background:var(--m14-bg); color:var(--m14-text); }
  #motoai-send{ background:var(--m14-accent); color:#fff; border:none; border-radius:12px; padding:10px 16px; cursor:pointer; flex-shrink:0; transition:transform .18s; }
  #motoai-send:hover{ transform: scale(1.06); }

  .m-msg{ margin:8px 0; padding:12px 14px; border-radius:14px; max-width:86%; line-height:1.4; word-break:break-word; box-shadow:0 6px 18px rgba(2,6,23,0.08); }
  .m-msg.bot{ background: rgba(255,255,255,0.92); color:#111; }
  .m-msg.user{ background: linear-gradient(180deg,var(--m14-accent),#0066d9); color:#fff; margin-left:auto; box-shadow:0 8px 22px rgba(10,132,255,0.15); }

  @media (prefers-color-scheme:dark){
    :root{ --m14-card-bg:var(--m14-card-bg-dark); --m14-footer-bg: rgba(16,16,18,0.9); --m14-text:#f2f2f7; }
    .m-msg.bot{ background: rgba(30,31,33,0.9); color:#f2f2f7; }
    .m-msg.user{ background: linear-gradient(180deg,#0a84ff,#0071e3); }
    #motoai-suggestions{ background: rgba(20,20,22,0.9); }
    #motoai-header .tools button{ color:#f2f2f7; }
  }

  @media (max-width:520px){
    #motoai-card{ width: calc(100% - 24px); height:78vh; min-height:260px; }
    #motoai-bubble{ width:50px; height:50px; font-size:24px; border-radius:12px; }
  }

  /* Force visible helpers (in case host site tries to hide) */
  #motoai-root, #motoai-bubble, #motoai-overlay, #motoai-card { visibility: visible !important; }
  `;

  // safely append HTML+CSS when DOM ready (avoids insert issues if script runs early)
  function safeInjectUI(){
    if(document.getElementById('motoai-root')) return;
    try {
      // inject HTML at end of body
      if(document.body){
        document.body.insertAdjacentHTML('beforeend', uiHtml);
        // create style element
        const styleEl = document.createElement('style');
        styleEl.setAttribute('data-motoai','v14-style');
        styleEl.textContent = uiCss;
        document.head.appendChild(styleEl);
        // ensure element visible
        const root = document.getElementById('motoai-root');
        if(root) root.style.display = '';
      } else {
        console.warn('MotoAI v14: document.body not available yet.');
      }
    } catch (e){
      console.error('MotoAI v14 ‚Äî safeInjectUI error:', e);
    }
  }

  if(document.readyState === 'loading'){
    document.addEventListener('DOMContentLoaded', safeInjectUI);
  } else {
    safeInjectUI();
  }

  /* ---------- Basic refs (may be undefined until injected) ---------- */
  // We'll re-query in later parts once UI exists
  // Expose a helper to get elements safely
  function $safe(sel){ return document.getElementById(sel.replace(/^#/,'')) || document.querySelector(sel); }

  // Minimal initial state placeholders (will be populated by later parts)
  window.MotoAI_v14_state = {
    isOpen: false,
    sendLock: false,
    corpus: [],
    sessionMsgs: []
  };

  // Provide light API so loader/other scripts can check readiness
  window.MotoAI_v14 = window.MotoAI_v14 || {};
  Object.assign(window.MotoAI_v14, {
    cfg: CFG,
    injectUI: safeInjectUI,
    isReady: function(){ return !!document.getElementById('motoai-root'); },
    uiZIndex: CFG.uiZIndex
  });

  console.log('%c‚ÑπÔ∏è MotoAI v14 PART 1 injected UI shell (waiting for PART 2/3)...', 'color:#0a84ff');

  /* ---------- Small utility helpers used by later parts ---------- */
  // Robust tokenize with unicode fallback (safe for older browsers)
  function tokenizeSafe(s){
    try {
      return String(s || '').toLowerCase().replace(/[^\p{L}\p{N}\s]+/gu,' ').split(/\s+/).filter(Boolean);
    } catch(e) {
      // fallback for browsers without \p support
      return String(s || '').toLowerCase().replace(/[^a-z0-9\u00C0-\u024F\s]+/gi,' ').split(/\s+/).filter(Boolean);
    }
  }
  window.MotoAI_v14.tokenizeSafe = tokenizeSafe;

  // Lightweight normalize function for Vietnamese
  function normalizeTextLite(text){
    if(!text) return '';
    return String(text).toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g,'').replace(/ƒë/g,'d').trim();
  }
  window.MotoAI_v14.normalizeTextLite = normalizeTextLite;

  /* ---------- End of PART 1/3: UI core injected, helpers exposed ----------
     Next: Part 2/3 will include retrieval, corpus, session persistence, UI wiring, and sendQuery core.
     Then Part 3/3 will include Smart Engine rules, SpellFix, theme sync, learnFromRepo, and final bootstrap.
  */
/* motoai_v14_combo_standalone.js ‚Äî PART 2/3
   MotoAI v14 Combo ‚Äî Core Logic, Corpus, Session, UI Wiring
   (Append directly after Part 1, inside same IIFE)
*/

  console.log('%c‚öôÔ∏è MotoAI v14 PART 2 ‚Äî Core Logic loaded', 'color:#0a84ff');

  const CFG = window.MotoAI_v14.cfg;
  const ST = window.MotoAI_v14_state;
  const $ = sel => document.querySelector(sel);

  /* ---------- Corpus builder ---------- */
  function buildCorpusFromDOM(){
    try{
      let nodes = Array.from(document.querySelectorAll('main, article, section'));
      if(!nodes.length) nodes = [document.body];
      let texts = [];
      nodes.forEach(n=>{
        Array.from(n.querySelectorAll('h1,h2,h3')).forEach(h=>{
          if(h.innerText && h.innerText.trim().length>10) texts.push(h.innerText.trim());
        });
        Array.from(n.querySelectorAll('p, li')).forEach(p=>{
          const t = p.innerText.trim();
          if(t.length >= CFG.minSentenceLength) texts.push(t);
        });
      });
      if(!texts.length){
        const meta = document.querySelector('meta[name="description"]');
        if(meta && meta.content) texts.push(meta.content);
      }
      const uniqTexts = Array.from(new Set(texts)).slice(0, CFG.maxCorpusSentences);
      const currentTexts = new Set(ST.corpus.map(c=>c.text));
      uniqTexts.forEach(t=>{
        if(!currentTexts.has(t)){
          ST.corpus.push({id:ST.corpus.length, text:t, tokens:window.MotoAI_v14.tokenizeSafe(t)});
        }
      });
      localStorage.setItem(CFG.corpusKey, JSON.stringify(ST.corpus));
      console.log(`üìö MotoAI v14 built corpus: ${ST.corpus.length} items`);
    }catch(e){
      console.error('MotoAI v14 buildCorpusFromDOM error:', e);
    }
  }

  /* ---------- Corpus restore ---------- */
  (function restoreCorpus(){
    try{
      const raw = localStorage.getItem(CFG.corpusKey);
      if(raw){
        const parsed = JSON.parse(raw);
        if(Array.isArray(parsed) && parsed.length) ST.corpus = parsed;
      }
    }catch(e){}
  })();

  /* ---------- Session persistence ---------- */
  function loadSession(){
    try{
      const raw = sessionStorage.getItem(CFG.sessionKey);
      if(raw){
        ST.sessionMsgs = JSON.parse(raw);
      }
    }catch(e){ ST.sessionMsgs=[]; }
    if(!Array.isArray(ST.sessionMsgs)) ST.sessionMsgs=[];
  }

  function saveSession(){
    try{
      sessionStorage.setItem(CFG.sessionKey, JSON.stringify(ST.sessionMsgs));
    }catch(e){}
  }

  /* ---------- Memory: name ---------- */
  function saveUserName(name){
    try{ localStorage.setItem(CFG.memoryKeyName,name);}catch(e){}
  }
  function getUserName(){
    try{ return localStorage.getItem(CFG.memoryKeyName);}catch(e){return null;}
  }
  function detectNameFromText(txt){
    if(!txt) return null;
    const s = txt.replace(/\s+/g,' ').trim();
    const patterns = [
      /(?:t√¥i t√™n l√†|t√™n t√¥i l√†|m√¨nh t√™n l√†)\s+([A-Za-z√Ä-·ªπ\u00C0-\u024F0-9_\- ]{2,40})/i,
      /(?:t√¥i l√†|m√¨nh l√†)\s+([A-Za-z√Ä-·ªπ\u00C0-\u024F0-9_\- ]{2,40})/i
    ];
    for(const p of patterns){
      const m = s.match(p);
      if(m && m[1]){ const nm=m[1].trim(); saveUserName(nm); return nm; }
    }
    return null;
  }

  /* ---------- Retrieval basic ---------- */
  function retrieveBestAnswer(query){
    if(!query) return null;
    const qTokens = window.MotoAI_v14.tokenizeSafe(query);
    if(!qTokens.length || !ST.corpus.length) return null;
    let best={score:0,text:null};
    for(const c of ST.corpus){
      let sc=0;
      for(const qt of qTokens){
        if(c.tokens.includes(qt)) sc+=1;
      }
      if(c.text.toLowerCase().includes(query.toLowerCase())) sc+=0.6;
      if(sc>best.score) best={score:sc,text:c.text};
    }
    return best.score>0?best.text:null;
  }

  /* ---------- UI helpers ---------- */
  function addMessage(role, text){
    const bodyEl = $('#motoai-body');
    if(!bodyEl) return;
    const el = document.createElement('div');
    el.className = 'm-msg '+(role==='user'?'user':'bot');
    el.textContent = text;
    bodyEl.appendChild(el);
    bodyEl.scrollTop = bodyEl.scrollHeight;
    ST.sessionMsgs.push({role,text,t:Date.now()});
    saveSession();
    return el;
  }

  function buildSuggestions(){
    const wrap = $('#motoai-suggestions');
    if(!wrap) return;
    wrap.innerHTML='';
    CFG.suggestionTags.forEach(s=>{
      const b=document.createElement('button');
      b.textContent=s.label;
      b.dataset.q=s.q;
      b.onclick=()=>{ if(!ST.isOpen) openChat(); setTimeout(()=> sendQuery(s.q), 100); };
      wrap.appendChild(b);
    });
  }

  function showTypingDots(){
    const t=$('#motoai-typing');
    if(t) t.innerHTML='<span class="dot">.</span><span class="dot">.</span><span class="dot">.</span>';
  }
  function hideTypingDots(){
    const t=$('#motoai-typing');
    if(t) t.innerHTML='';
  }

  /* ---------- Chat open/close ---------- */
  function openChat(){
    const overlay=$('#motoai-overlay'),card=$('#motoai-card');
    if(ST.isOpen||!overlay||!card)return;
    overlay.classList.add('visible');
    card.setAttribute('aria-hidden','false');
    ST.isOpen=true;
    const name=getUserName();
    if(name) setTimeout(()=>addMessage('bot',`Ch√†o ${name}! M√¨nh nh·ªõ b·∫°n r·ªìi üëã`),400);
    renderSession();
    setTimeout(()=>{ try{$('#motoai-input').focus();}catch(e){} },320);
    document.documentElement.style.overflow='hidden';
  }

  function closeChat(){
    const overlay=$('#motoai-overlay'),card=$('#motoai-card');
    if(!ST.isOpen||!overlay||!card)return;
    overlay.classList.remove('visible');
    card.setAttribute('aria-hidden','true');
    ST.isOpen=false;
    document.documentElement.style.overflow='';
    hideTypingDots();
  }

  function renderSession(){
    const bodyEl=$('#motoai-body');
    if(!bodyEl)return;
    bodyEl.innerHTML='';
    if(ST.sessionMsgs.length){
      ST.sessionMsgs.forEach(m=>{
        const el=document.createElement('div');
        el.className='m-msg '+(m.role==='user'?'user':'bot');
        el.textContent=m.text;
        bodyEl.appendChild(el);
      });
      bodyEl.scrollTop=bodyEl.scrollHeight;
    }else{
      addMessage('bot','üëã Xin ch√†o! M√¨nh l√† MotoAI v14 ‚Äî h·ªèi th·ª≠ ‚ÄúXe ga‚Äù, ‚ÄúXe s·ªë‚Äù, ‚ÄúTh·ªß t·ª•c‚Äù, ho·∫∑c ‚ÄúXe 50cc‚Äù nh√©!');
    }
  }

  /* ---------- SendQuery basic (will be enhanced by Smart Engine in Part 3) ---------- */
  function sendQuery(text){
    if(!text||!text.trim())return;
    const inputEl=$('#motoai-input');
    const sendBtn=$('#motoai-send');
    if(ST.sendLock)return;
    ST.sendLock=true;
    if(sendBtn) sendBtn.disabled=true;

    addMessage('user',text);
    const name=detectNameFromText(text);
    if(name){
      addMessage('bot',`ƒê√£ nh·ªõ t√™n: ${name} ‚ú®`);
      ST.sendLock=false;
      if(sendBtn) sendBtn.disabled=false;
      return;
    }

    showTypingDots();
    setTimeout(()=>{
      try{
        const ans=retrieveBestAnswer(text);
        hideTypingDots();
        if(ans){
          addMessage('bot',ans);
        }else{
          addMessage('bot','Xin l·ªói, m√¨nh ch∆∞a t√¨m th·∫•y n·ªôi dung c·ª• th·ªÉ tr√™n trang n√†y. B·∫°n th·ª≠ h·ªèi kh√°c nh√©!');
        }
      }catch(e){
        console.error(e);
        addMessage('bot','L·ªói khi x·ª≠ l√Ω c√¢u tr·∫£ l·ªùi.');
      }finally{
        ST.sendLock=false;
        if(sendBtn) sendBtn.disabled=false;
      }
    },320);
  }

  /* ---------- Event wiring ---------- */
  function bindUIEvents(){
    const bubble=$('#motoai-bubble'),overlay=$('#motoai-overlay');
    const closeBtn=$('#motoai-close'),clearBtn=$('#motoai-clear');
    const sendBtn=$('#motoai-send'),inputEl=$('#motoai-input');

    if(bubble) bubble.onclick=()=>{ if(!ST.isOpen){ buildCorpusFromDOM(); openChat(); } else closeChat(); };
    if(overlay) overlay.onclick=(e)=>{ if(e.target===overlay) closeChat(); };
    if(closeBtn) closeBtn.onclick=closeChat;
    if(clearBtn) clearBtn.onclick=()=>{ ST.sessionMsgs=[]; saveSession(); $('#motoai-body').innerHTML=''; addMessage('bot','üóë ƒê√£ x√≥a h·ªôi tho·∫°i.'); };
    if(sendBtn) sendBtn.onclick=()=>{ const v=inputEl.value.trim(); if(v){ inputEl.value=''; sendQuery(v);} };
    if(inputEl) inputEl.addEventListener('keydown',(e)=>{ if(e.key==='Enter'&&!e.shiftKey){ e.preventDefault(); const v=inputEl.value.trim(); if(v){ inputEl.value=''; sendQuery(v);} }});
    document.addEventListener('keydown',(e)=>{ if(e.key==='Escape'&&ST.isOpen) closeChat(); });
  }

  /* ---------- Init core ---------- */
  function initCore(){
    buildSuggestions();
    loadSession();
    buildCorpusFromDOM();
    bindUIEvents();
    console.log('%c‚úÖ MotoAI v14 Core ready (Part2/3 complete)', 'color:#0a84ff');
  }

  if(document.readyState==='loading'){
    document.addEventListener('DOMContentLoaded',initCore);
  }else initCore();

  // Expose basic API for next part
  Object.assign(window.MotoAI_v14,{
    buildCorpusFromDOM,
    sendQuery,
    openChat,
    closeChat,
    addMessage,
    getUserName,
    detectNameFromText,
    renderSession
  });

/* ---------- End of PART 2/3 ----------
   Next: Part 3/3 will include Smart Engine, SpellFix, Theme Sync, Auto Learn, and final bootstrap.
*/

 /* motoai_v14_combo_standalone.js ‚Äî PART 3/3
   MotoAI v14 Combo ‚Äî Smart Engine, SpellFix, Theme Sync, Auto Learn, Final Bootstrap
   (Append directly after Part 2)
*/

  console.log('%cü§ñ MotoAI v14 PART 3 ‚Äî Smart Engine + Learn system loaded', 'color:#0a84ff');

  const CFG = window.MotoAI_v14.cfg;
  const ST = window.MotoAI_v14_state;
  const normalize = window.MotoAI_v14.normalizeTextLite;

  /* ---------- Smart Engine Rules (v14, base from v13 but improved weight) ---------- */
  const rules = [
    { pattern: /^(ch√†o|hi|hello|alo|xin ch√†o|h·ªó tr·ª£|gi√∫p|c·ª©u|h·ªèi)$/i,
      answer: [
        "Ch√†o b·∫°n! M√¨nh l√† MotoAI ü§ñ. M√¨nh c√≥ th·ªÉ gi√∫p g√¨ v·ªÅ thu√™ xe m√°y nh·ªâ?",
        "Xin ch√†o! B·∫°n mu·ªën h·ªèi v·ªÅ xe s·ªë, xe ga, th·ªß t·ª•c hay b·∫£ng gi√° thu√™ xe?",
        "MotoAI nghe! B·∫°n c·∫ßn h·ªó tr·ª£ th√¥ng tin g√¨ ·∫°?"
      ]
    },
    { pattern: /(xe s·ªë|wave|sirius|blade|future|exciter|winner|ex150|150cc)/i,
      keywords: ['xe s·ªë','wave','sirius','future','exciter','winner'],
      answer: [
        "Xe s·ªë üèç ti·∫øt ki·ªám xƒÉng, gi√° r·∫ª, ph√π h·ª£p ƒëi l·∫°i h√†ng ng√†y. Gi√° thu√™ ch·ªâ t·ª´ 100k/ng√†y.",
        "D√≤ng xe s·ªë r·∫•t b·ªÅn v√† d·ªÖ ƒëi ‚Äî b·∫°n mu·ªën thu√™ lo·∫°i n√†o ƒë·ªÉ m√¨nh b√°o gi√° c·ª• th·ªÉ?"
      ]
    },
    { pattern: /(xe ga|tay ga|vision|lead|air blade|sh|vespa)/i,
      keywords: ['xe ga','tay ga','vision','lead','airblade','vespa'],
      answer: [
        "Xe ga üõµ √™m √°i, c·ªëp r·ªông, ph√π h·ª£p ƒëi trong ph·ªë. Vision, Lead ch·ªâ t·ª´ 120k/ng√†y.",
        "Xe ga r·∫•t ƒë∆∞·ª£c ∆∞a chu·ªông ‚Äî b·∫°n mu·ªën xem b·∫£ng gi√° chi ti·∫øt kh√¥ng?"
      ]
    },
    { pattern: /(50cc|kh√¥ng c·∫ßn b·∫±ng|ch∆∞a c√≥ b·∫±ng|h·ªçc sinh|sinh vi√™n)/i,
      keywords: ['50cc','kh√¥ng c·∫ßn b·∫±ng','ch∆∞a c√≥ b·∫±ng'],
      answer: [
        "Xe 50cc kh√¥ng c·∫ßn GPLX, ch·ªâ c·∫ßn CCCD üìã. R·∫•t ph√π h·ª£p cho h·ªçc sinh, sinh vi√™n!",
        "N·∫øu b·∫°n ch∆∞a c√≥ b·∫±ng, xe 50cc l√† l·ª±a ch·ªçn ho√†n h·∫£o. B·∫°n mu·ªën xem gi√° xe 50cc kh√¥ng?"
      ]
    },
    { pattern: /(th·ªß t·ª•c|gi·∫•y t·ªù|c·∫ßn g√¨|ƒëi·ªÅu ki·ªán|c·ªçc|ƒë·∫∑t c·ªçc)/i,
      answer: [
        "Th·ªß t·ª•c thu√™ xe r·∫•t ƒë∆°n gi·∫£n! üìÑ Ch·ªâ c·∫ßn CCCD v√† GPLX. Xe 50cc th√¨ ch·ªâ c·∫ßn CCCD.",
        "V·ªÅ th·ªß t·ª•c, b·∫°n chu·∫©n b·ªã CCCD + b·∫±ng l√°i, kh√¥ng c·∫ßn ƒë·∫∑t c·ªçc ti·ªÅn m·∫∑t nh√©."
      ]
    },
    { pattern: /(gi√°|b·∫£ng gi√°|bao nhi√™u|thu√™ bao nhi√™u)/i,
      answer: [
        "B·∫£ng gi√° thu√™ xe üí∞:\n- Xe s·ªë: 100k‚Äì120k/ng√†y\n- Xe ga: 120k‚Äì150k/ng√†y\n- Xe c√¥n: 200k‚Äì250k/ng√†y",
        "Gi√° thu√™ xe dao ƒë·ªông t·ª´ 100k ƒë·∫øn 150k/ng√†y t√πy lo·∫°i. Thu√™ d√†i h·∫°n gi·∫£m gi√° th√™m nh√©!"
      ]
    },
    { pattern: /(li√™n h·ªá|hotline|zalo|sƒët|ƒë·ªãa ch·ªâ|c·ª≠a h√†ng|·ªü ƒë√¢u)/i,
      answer: [
        "B·∫°n li√™n h·ªá ‚òéÔ∏è 085.725.5868 (c√≥ Zalo) nh√©!\nC·ª≠a h√†ng t·∫°i Nguy·ªÖn VƒÉn C·ª´ ‚Äî c√≥ giao xe t·∫≠n n∆°i.",
        "Li√™n h·ªá nhanh qua Zalo/Hotline: 0857255868. H·ªó tr·ª£ giao xe t·∫≠n n∆°i 24/7!"
      ]
    },
    { pattern: /(giao xe|ship|v·∫≠n chuy·ªÉn|s√¢n bay|b·∫øn xe|t·∫≠n n∆°i)/i,
      answer: [
        "C√≥ ·∫°! üöÄ Giao xe t·∫≠n n∆°i mi·ªÖn ph√≠ trong n·ªôi th√†nh H√† N·ªôi, b·∫øn xe v√† s√¢n bay.",
        "D·ªãch v·ª• giao xe t·∫≠n n∆°i ho√†n to√†n mi·ªÖn ph√≠ ‚Äî b·∫°n g·ª≠i ƒë·ªãa ch·ªâ l√† c√≥ xe ngay!"
      ]
    },
    { pattern: /^(c·∫£m ∆°n|thanks|ok|oke|t·ªët qu√°|hay qu√°|tuy·ªát v·ªùi)$/i,
      answer: [
        "Kh√¥ng c√≥ g√¨ ·∫°! üòä",
        "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n!",
        "C·∫£m ∆°n b·∫°n, ch√∫c b·∫°n c√≥ chuy·∫øn ƒëi an to√†n üöó‚ú®"
      ]
    },
    { pattern: /.+/i, isFallback:true,
      answer: [
        "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi n√†y. B·∫°n th·ª≠ h·ªèi 'Gi√° thu√™ xe', 'Xe ga', ho·∫∑c 'Th·ªß t·ª•c' nh√©.",
        "M√¨nh ch∆∞a c√≥ d·ªØ li·ªáu c√¢u h·ªèi n√†y. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ b·∫£ng gi√°, lo·∫°i xe, ho·∫∑c g·ªçi 085.725.5868 nha."
      ]
    }
  ];

  /* ---------- SmartAnswer logic ---------- */
  function smartAnswer(query){
    const qn = normalize(query);
    let best = null, bestScore = 0;
    for(const rule of rules){
      if(rule.isFallback) continue;
      let score = 0;
      if(rule.pattern.test(query) || rule.pattern.test(qn)) score += 2;
      if(rule.keywords){
        for(const kw of rule.keywords){
          if(qn.includes(normalize(kw))) score += 1;
        }
      }
      if(score > bestScore){ best = rule; bestScore = score; }
    }
    if(best && bestScore>0.5){
      const a = best.answer[Math.floor(Math.random()*best.answer.length)];
      return a;
    }
    // fallback
    const fb = rules.find(r=>r.isFallback);
    return fb? fb.answer[Math.floor(Math.random()*fb.answer.length)] : "Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu c√¢u h·ªèi.";
  }

  /* ---------- SpellFix system ---------- */
  const spellFixMap = {
    'thue xe may':'thu√™ xe m√°y','xe so':'xe s·ªë','xe ga':'xe ga','thu tuc':'th·ªß t·ª•c',
    'giay to':'gi·∫•y t·ªù','bang gia':'b·∫£ng gi√°','lien he':'li√™n h·ªá','thue xe ha noi':'thu√™ xe H√† N·ªôi'
  };
  function autoFix(text){
    let t = text.toLowerCase();
    for(const [wrong,right] of Object.entries(spellFixMap)){
      const re = new RegExp(`\\b${wrong}\\b`,'gi');
      t = t.replace(re,right);
    }
    return t;
  }

  /* ---------- Theme sync (auto detect + body class) ---------- */
  (function(){
    function applyTheme(){
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      const dark = prefersDark || document.body.classList.contains('dark');
      document.body.dataset.theme = dark?'dark':'light';
    }
    applyTheme();
    try{ window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change',applyTheme); }catch(e){}
    const obs = new MutationObserver(applyTheme);
    obs.observe(document.body,{attributes:true,attributeFilter:['class']});
  })();

  /* ---------- Learn (optional fetch from sitemap) ---------- */
  async function learnFromRepo(){
    try{
      const sitemap = CFG.sitemapPath;
      const res = await fetch(sitemap,{cache:'no-store'});
      if(!res.ok) return;
      const data = await res.json();
      if(!data.pages) return;
      const current = new Set(ST.corpus.map(c=>c.text));
      let added=0;
      for(const path of data.pages){
        const r = await fetch(path,{cache:'no-store'});
        if(!r.ok) continue;
        const txt = await r.text();
        const lines = txt.split(/[\r\n]+/).map(l=>l.trim()).filter(l=>l.length>CFG.minSentenceLength);
        for(const t of lines){
          if(!current.has(t)){
            ST.corpus.push({id:ST.corpus.length,text:t,tokens:window.MotoAI_v14.tokenizeSafe(t)});
            current.add(t); added++;
          }
        }
      }
      if(added>0) localStorage.setItem(CFG.corpusKey,JSON.stringify(ST.corpus));
      console.log(`üìò MotoAI learned ${added} new texts.`);
    }catch(e){ console.warn('MotoAI learnFromRepo error:',e); }
  }

  /* ---------- Enhanced sendQuery (uses smartAnswer + spellfix + retrieval fallback) ---------- */
  function smartSendQuery(text){
    if(!text||!text.trim())return;
    const inputEl=$('#motoai-input');
    const sendBtn=$('#motoai-send');
    if(ST.sendLock)return;
    ST.sendLock=true;
    if(sendBtn) sendBtn.disabled=true;
    const fixed = autoFix(text);
    window.MotoAI_v14.addMessage('user',fixed);

    const name = window.MotoAI_v14.detectNameFromText(fixed);
    if(name){
      window.MotoAI_v14.addMessage('bot',`ƒê√£ nh·ªõ t√™n: ${name} ‚ú®`);
      ST.sendLock=false;
      if(sendBtn) sendBtn.disabled=false;
      return;
    }

    showTypingDots();
    setTimeout(()=>{
      try{
        let ans = smartAnswer(fixed);
        if(!ans) ans = retrieveBestAnswer(fixed);
        hideTypingDots();
        window.MotoAI_v14.addMessage('bot', ans || 'M√¨nh ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi cho c√¢u n√†y.');
      }catch(e){
        hideTypingDots();
        window.MotoAI_v14.addMessage('bot','L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi.');
        console.error(e);
      }finally{
        ST.sendLock=false;
        if(sendBtn) sendBtn.disabled=false;
      }
    }, 250);
  }

  // override main send
  window.MotoAI_v14.sendQuery = smartSendQuery;

  /* ---------- Final bootstrap ---------- */
  window.addEventListener('load', ()=>{
    setTimeout(()=>{ learnFromRepo(); }, 1500);
    console.log('%cüöÄ MotoAI v14 Combo Standalone fully loaded ‚Äî Ready!', 'color:#0a84ff;font-weight:bold;');
  });

})(); // END of entire MotoAI v14 Combo Standalone
