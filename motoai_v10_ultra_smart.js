/* ============================================================
 * üß† MotoAI v10 Ultra Smart ‚Äî Core (Hybrid Pro Base)
 * ============================================================ */
(function(){
  if(window.MotoAI_v10_LOADED) return;
  window.MotoAI_v10_LOADED = true;
  console.log('%cMotoAI v10 Ultra Smart ‚Äî Core loaded','color:#0a84ff;font-weight:bold;');

  const CFG = {
    corpusKey:'MotoAI_v10_corpus',
    sessionKey:'MotoAI_v10_session_msgs',
    sitemapPath:'/moto_sitemap.json'
  };

  // === HTML + CSS inject gi·ªØ nguy√™n giao di·ªán Apple ===
  const html = `<div id="motoai-root">
      <div id="motoai-bubble">ü§ñ</div>
      <div id="motoai-overlay"><div id="motoai-card">
        <header id="motoai-header"><span>MotoAI Assistant</span><button id="motoai-close">‚úï</button></header>
        <main id="motoai-body"></main>
        <footer id="motoai-footer"><input id="motoai-input" placeholder="Nh·∫≠p c√¢u h·ªèi..."/><button id="motoai-send">G·ª≠i</button></footer>
      </div></div></div>`;
  const css = `#motoai-root{position:fixed;bottom:20px;left:16px;z-index:2147483000;font-family:-apple-system,BlinkMacSystemFont,"Helvetica Neue",sans-serif;}
  #motoai-bubble{width:54px;height:54px;border-radius:14px;background:#0a84ff;color:#fff;display:flex;align-items:center;justify-content:center;cursor:pointer;box-shadow:0 8px 20px rgba(0,0,0,.2);}
  #motoai-overlay{position:fixed;inset:0;display:none;align-items:flex-end;justify-content:center;background:rgba(0,0,0,.4);}
  #motoai-overlay.visible{display:flex;}
  #motoai-card{width:92%;max-width:900px;height:70vh;background:#fff;border-radius:18px 18px 10px 10px;display:flex;flex-direction:column;overflow:hidden;}
  #motoai-header{padding:8px 14px;font-weight:700;color:#0a84ff;display:flex;justify-content:space-between;align-items:center;border-bottom:1px solid rgba(0,0,0,.1);}
  #motoai-body{flex:1;overflow:auto;padding:12px;font-size:15px;}
  #motoai-footer{padding:10px;display:flex;gap:8px;border-top:1px solid rgba(0,0,0,.1);}
  #motoai-input{flex:1;padding:10px;border-radius:10px;border:1px solid rgba(0,0,0,.15);}
  #motoai-send{background:#0a84ff;color:#fff;border:none;border-radius:10px;padding:10px 16px;cursor:pointer;}
  .m-msg{margin:6px 0;padding:10px 12px;border-radius:14px;max-width:86%;word-break:break-word;}
  .m-msg.bot{background:#f1f3f5;}
  .m-msg.user{background:#0a84ff;color:#fff;margin-left:auto;}
  `;
  document.head.insertAdjacentHTML('beforeend', `<style>${css}</style>`);
  document.body.insertAdjacentHTML('beforeend', html);

  // === Core logic ===
  const root = document.getElementById('motoai-root');
  const overlay = document.getElementById('motoai-overlay');
  const card = document.getElementById('motoai-card');
  const bubble = document.getElementById('motoai-bubble');
  const bodyEl = document.getElementById('motoai-body');
  const inputEl = document.getElementById('motoai-input');
  const sendBtn = document.getElementById('motoai-send');
  const closeBtn = document.getElementById('motoai-close');

  let sessionMsgs = JSON.parse(sessionStorage.getItem(CFG.sessionKey)||'[]');
  let corpus = [];

  function addMsg(role,text){
    const el=document.createElement('div');
    el.className='m-msg '+(role==='user'?'user':'bot');
    el.textContent=text;
    bodyEl.appendChild(el); bodyEl.scrollTop=bodyEl.scrollHeight;
    sessionMsgs.push({role,text}); sessionStorage.setItem(CFG.sessionKey,JSON.stringify(sessionMsgs));
  }

  function sendQuery(q){
    if(!q.trim())return;
    addMsg('user',q); inputEl.value='';
    let ans=null;
    try{ if(window.MotoAI_v10.smartAnswer) ans=window.MotoAI_v10.smartAnswer(q); }catch{}
    if(!ans){ ans=retrieveBest(q)||'Xin l·ªói, m√¨nh ch∆∞a c√≥ d·ªØ li·ªáu cho c√¢u h·ªèi n√†y.'; }
    addMsg('bot',ans);
  }

  function tokenize(t){return t.toLowerCase().replace(/[^\p{L}\p{N}\s]+/gu,' ').split(/\s+/).filter(Boolean);}
  function buildCorpus(){
    const txts=Array.from(document.querySelectorAll('p,h1,h2,h3,li')).map(e=>e.innerText.trim()).filter(t=>t.length>20);
    corpus=txts.map((t,i)=>({id:i,text:t,tokens:tokenize(t)}));
    localStorage.setItem(CFG.corpusKey,JSON.stringify(corpus));
  }
  function retrieveBest(q){
    const qs=tokenize(q); if(!qs.length)return null;
    let best={score:0,text:null};
    corpus.forEach(c=>{
      let sc=0; qs.forEach(w=>{if(c.tokens.includes(w))sc++;});
      if(sc>best.score)best={score:sc,text:c.text};
    });
    return best.text;
  }

  bubble.onclick=()=>overlay.classList.add('visible');
  closeBtn.onclick=()=>overlay.classList.remove('visible');
  sendBtn.onclick=()=>sendQuery(inputEl.value);
  inputEl.onkeydown=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();sendQuery(inputEl.value);}};

  try{const raw=localStorage.getItem(CFG.corpusKey);if(raw)corpus=JSON.parse(raw);else buildCorpus();}catch{buildCorpus();}
  console.log('‚úÖ MotoAI v10 Ultra Smart Core ready');
})();

/* ============================================================
 * üß† MotoAI v10 Ultra Smart ‚Äî SmartEngine + SpellFix
 * ============================================================ */
(function(){
  if(!window.MotoAI_v10) window.MotoAI_v10 = {};
  console.log('%cMotoAI Ultra SmartEngine active','color:#0a84ff;font-weight:bold;');

  // ======= Smart rules (t∆∞∆°ng t·ª± v13 nh∆∞ng tinh g·ªçn) =======
  const rules = [
    { pattern: /(ch√†o|xin ch√†o|hello|hi|alo)/i,
      answer: [
        "Ch√†o b·∫°n üëã! M√¨nh l√† MotoAI Ultra Smart, c√≥ th·ªÉ gi√∫p g√¨ v·ªÅ thu√™ xe m√°y ·∫°?",
        "Xin ch√†o! B·∫°n mu·ªën h·ªèi v·ªÅ gi√°, xe s·ªë, xe ga hay th·ªß t·ª•c thu√™ xe?"
      ]},
    { pattern: /(xe s·ªë|wave|sirius|future|blade|winner)/i,
      answer: [
        "Xe s·ªë üèç ti·∫øt ki·ªám xƒÉng, d·ªÖ ƒëi, gi√° thu√™ ch·ªâ kho·∫£ng 100k‚Äì120k/ng√†y.",
        "B·∫°n ch·ªçn xe s·ªë nh∆∞ Wave, Sirius, Winner nh√© ‚Äî r·∫ª, b·ªÅn v√† ph√π h·ª£p di chuy·ªÉn quanh H√† N·ªôi."
      ]},
    { pattern: /(xe ga|lead|vision|air blade|sh|grande|vespa)/i,
      answer: [
        "Xe ga üõµ ch·∫°y √™m, c·ªëp r·ªông, ki·ªÉu d√°ng ƒë·∫πp. Gi√° thu√™ kho·∫£ng 120k‚Äì150k/ng√†y.",
        "Vision, Lead, Air Blade l√† nh·ªØng xe ga ph·ªï bi·∫øn ‚Äî b·∫°n mu·ªën xem b·∫£ng gi√° c·ª• th·ªÉ kh√¥ng?"
      ]},
    { pattern: /(50cc|kh√¥ng c·∫ßn b·∫±ng|ch∆∞a c√≥ b·∫±ng|h·ªçc sinh|sinh vi√™n)/i,
      answer: [
        "Xe 50cc üö≤ kh√¥ng c·∫ßn b·∫±ng l√°i, r·∫•t h·ª£p cho h·ªçc sinh ‚Äì sinh vi√™n. Gi√° thu√™ ch·ªâ t·ª´ 100k/ng√†y.",
        "N·∫øu b·∫°n ch∆∞a c√≥ GPLX, thu√™ xe 50cc l√† l·ª±a ch·ªçn h·ª£p l√Ω nh·∫•t."
      ]},
    { pattern: /(th·ªß t·ª•c|gi·∫•y t·ªù|c·∫ßn g√¨|ƒë·∫∑t c·ªçc)/i,
      answer: [
        "Th·ªß t·ª•c ƒë∆°n gi·∫£n üìÑ: ch·ªâ c·∫ßn CCCD + B·∫±ng l√°i (ho·∫∑c Passport). Kh√¥ng c·∫ßn c·ªçc ti·ªÅn m·∫∑t!",
        "B·∫°n ch·ªâ c·∫ßn CCCD v√† GPLX l√† nh·∫≠n xe ngay. V·ªõi xe 50cc, ch·ªâ c·∫ßn CCCD th√¥i nh√©!"
      ]},
    { pattern: /(gi√°|bao nhi√™u|b·∫£ng gi√°|gi√° thu√™)/i,
      answer: [
        "Gi√° thu√™ linh ho·∫°t üí∞:\n- Xe s·ªë: 100k‚Äì120k/ng√†y\n- Xe ga: 120k‚Äì150k/ng√†y\n- Xe c√¥n: 200k‚Äì250k/ng√†y.",
        "T√πy lo·∫°i xe v√† s·ªë ng√†y thu√™, gi√° ch·ªâ t·ª´ 100k. Thu√™ d√†i h·∫°n gi·∫£m th√™m n·ªØa!"
      ]},
    { pattern: /(li√™n h·ªá|zalo|sƒët|hotline|·ªü ƒë√¢u|ƒë·ªãa ch·ªâ)/i,
      answer: [
        "Li√™n h·ªá nhanh qua Zalo/Hotline ‚òéÔ∏è 085.725.5868 ‚Äî b√™n m√¨nh giao xe t·∫≠n n∆°i mi·ªÖn ph√≠ H√† N·ªôi!",
        "B·∫°n g·ªçi ngay 085.725.5868 (c√≥ Zalo) ƒë·ªÉ ƒë·∫∑t xe ho·∫∑c nh·∫≠n t∆∞ v·∫•n tr·ª±c ti·∫øp nh√©!"
      ]},
    { pattern: /(giao xe|ship|v·∫≠n chuy·ªÉn|t·∫≠n n∆°i|s√¢n bay|b·∫øn xe)/i,
      answer: [
        "C√≥ ·∫° üöö! B√™n m√¨nh giao xe t·∫≠n n∆°i mi·ªÖn ph√≠ trong n·ªôi th√†nh, b·∫øn xe, s√¢n bay, kh√°ch s·∫°n.",
        "B·∫°n ch·ªâ c·∫ßn g·ª≠i ƒë·ªãa ch·ªâ qua Zalo, b√™n m√¨nh giao xe t·∫≠n n∆°i trong 15‚Äì30 ph√∫t!"
      ]},
    { pattern: /(c·∫£m ∆°n|thanks|ok|oke|hay qu√°|t·ªët qu√°)/i,
      answer: [
        "C·∫£m ∆°n b·∫°n! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ üòä",
        "Kh√¥ng c√≥ g√¨ ·∫°, ch√∫c b·∫°n m·ªôt ng√†y vui v·∫ª!"
      ]},
    { pattern: /.+/i, answer:[
        "M√¨nh ch∆∞a r√µ c√¢u h·ªèi. B·∫°n c√≥ th·ªÉ h·ªèi: gi√° thu√™ xe, th·ªß t·ª•c, xe ga, xe s·ªë,...",
        "Xin l·ªói, m√¨nh ch∆∞a c√≥ th√¥ng tin c√¢u h·ªèi n√†y. Th·ª≠ h·ªèi v·ªÅ gi√° ho·∫∑c th·ªß t·ª•c nh√©!"
      ], isFallback:true }
  ];

  function random(arr){ return arr[Math.floor(Math.random()*arr.length)]; }

  // ======= Smart Answer =======
  function smartAnswer(query){
    let best = null;
    for(const r of rules){
      if(r.pattern.test(query)){
        best = r;
        if(!r.isFallback) break;
      }
    }
    return best ? random(best.answer) : null;
  }

  // ======= SpellFix =======
  const spellMap = {
    'thue xe may':'thu√™ xe m√°y','xe so':'xe s·ªë','xe ga':'xe ga',
    'thu tuc':'th·ªß t·ª•c','giay to':'gi·∫•y t·ªù','bang gia':'b·∫£ng gi√°',
    'lien he':'li√™n h·ªá','xe ha noi':'xe H√† N·ªôi'
  };
  function autoFix(text){
    let t=text.toLowerCase();
    for(const [wrong, right] of Object.entries(spellMap)){
      const re=new RegExp(`\\b${wrong}\\b`,'gi'); t=t.replace(re,right);
    }
    return t;
  }

  // ======= Patch sendQuery ƒë·ªÉ g·∫Øn SpellFix =======
  if(window.MotoAI_v10 && window.MotoAI_v10.sendQuery){
    const orig=window.MotoAI_v10.sendQuery;
    window.MotoAI_v10.sendQuery=function(q){
      const fixed=autoFix(q);
      if(fixed!==q) console.log(`üìù SpellFix: "${q}" ‚Üí "${fixed}"`);
      return orig(fixed);
    };
  }

  // G·∫Øn v√†o core
  window.MotoAI_v10.smartAnswer = smartAnswer;
  console.log('‚úÖ SmartEngine + SpellFix attached to MotoAI v10');
})();

/* ============================================================
 * üåê MotoAI v10 Ultra Smart ‚Äî Auto Learn from Repo
 * ============================================================ */
(function(){
  if(!window.MotoAI_v10) return;
  console.log('%cMotoAI Ultra Smart ‚Äî AutoLearn System Online','color:#0a84ff;font-weight:bold;');

  const CFG = {
    corpusKey:'MotoAI_v10_corpus',
    sitemapPath:'/moto_sitemap.json'
  };

  let corpus = [];
  try{
    const raw = localStorage.getItem(CFG.corpusKey);
    if(raw) corpus = JSON.parse(raw);
  }catch(e){ corpus=[]; }

  function tokenize(t){
    return t.toLowerCase().replace(/[^\p{L}\p{N}\s]+/gu,' ').split(/\s+/).filter(Boolean);
  }

  // üöÄ H·ªçc d·ªØ li·ªáu t·ª´ repo GitHub (moto_sitemap.json)
  async function learnFromRepo(){
    try{
      const lastLearn = localStorage.getItem('MotoAI_lastLearn');
      const now = Date.now();
      const threeDays = 3*24*60*60*1000;
      if(lastLearn && (now - parseInt(lastLearn,10)) < threeDays){
        console.log('‚è≥ B·ªè qua h·ªçc repo (ch∆∞a ƒë·ªß 3 ng√†y)');
        return;
      }

      const sitemap = CFG.sitemapPath;
      const res = await fetch(sitemap, {cache:'no-store'});
      if(!res.ok) { console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y sitemap:', sitemap); return; }
      const data = await res.json();
      if(!data.pages || !Array.isArray(data.pages)){
        console.log('‚ö†Ô∏è ƒê·ªãnh d·∫°ng sitemap kh√¥ng h·ª£p l·ªá');
        return;
      }

      console.log(`üìñ H·ªçc ${data.pages.length} trang trong repo...`);
      let totalNew = 0;
      const currentSet = new Set(corpus.map(c=>c.text));

      for(const path of data.pages){
        try{
          const r = await fetch(path,{cache:'no-store'});
          if(!r.ok) continue;
          const html = await r.text();
          const div = document.createElement('div');
          div.innerHTML = html;
          const texts = Array.from(div.querySelectorAll('p,h1,h2,h3,li'))
            .map(e=>e.textContent.trim())
            .filter(t=>t.length > 40 && !t.includes('{') && !t.includes('}'));
          for(const t of texts){
            if(!currentSet.has(t)){
              corpus.push({id: corpus.length, text: t, tokens: tokenize(t)});
              currentSet.add(t);
              totalNew++;
            }
          }
        }catch(e){ console.log('‚ö†Ô∏è L·ªói ƒë·ªçc', path); }
      }

      if(totalNew>0){
        localStorage.setItem(CFG.corpusKey, JSON.stringify(corpus));
        console.log(`‚úÖ H·ªçc xong repo: +${totalNew} m·∫´u`);
      }
      localStorage.setItem('MotoAI_lastLearn', now);
    }catch(e){
      console.error('‚ùå L·ªói learnFromRepo:', e);
    }
  }

  // üíæ T·ª± refresh corpus sau 72h (ch·ªâ rebuild local corpus)
  (function(){
    const now = Date.now();
    const last = parseInt(localStorage.getItem('MotoAI_lastCorpusBuild')||'0',10);
    const seventyTwoHrs = 72*60*60*1000;
    if(!last || (now-last)>seventyTwoHrs){
      console.log('üîÅ Refresh corpus (72h)...');
      try{
        if(window.MotoAI_v10 && window.MotoAI_v10.rebuildCorpus)
          window.MotoAI_v10.rebuildCorpus();
      }catch(e){ console.warn('L·ªói refresh corpus:',e); }
      localStorage.setItem('MotoAI_lastCorpusBuild', now);
    }
  })();

  // üîÑ Kh·ªüi ch·∫°y h·ªçc repo sau khi trang load
  window.addEventListener('load', ()=>{
    setTimeout(()=> learnFromRepo(), 2500);
  });

  console.log('%c‚úÖ MotoAI Ultra Smart AutoLearn attached','color:#0a84ff;font-weight:bold;');
})();
/* ============================================================
 * üçé MotoAI v10 Ultra Smart ‚Äî Final Stable Build Log
 * ============================================================ */
(function(){
  const style = 'color:#0a84ff;font-weight:bold;font-size:14px;';
  console.log('%cüöÄ MotoAI v10 Ultra Smart ‚Äî Final Stable Build (Core + Smart + Repo)', style);
  console.log('%cüß† Core: v10 Hybrid Pro (Apple UI)', style);
  console.log('%cü§ñ SmartEngine + SpellFix: Active', style);
  console.log('%cüåê Repo AutoLearn + Corpus Refresh: Enabled', style);
  console.log('%c‚úÖ MotoAI Ready ‚Äî Adaptive AI without CSS Conflict', style);
})();
